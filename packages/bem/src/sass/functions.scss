// 选择器转字符串
// TODO: $str: str-selector('.button-primary ') => button-primary
@function str-selector($selector) {
  // 使用 inspect($selector) 获取选择器的字符串表示（比如 .class-name 或 #id）。
  $selector: inspect($selector);
  // 使用 str-slice($selector, 2, -2) 去掉选择器两端的符号（例如 . 或 #）。
  // str-slice("abcd", 2, -2)  => "bc"
  $selector: str-slice($selector, 2, -2);
  @return $selector;
}
// TODO: 输入: 'hello' ==> 输出: 'olleh'
// 反向字符串
@function str-reverse($string) {
  $result: '';
  @for $i from str-length($string) through 1 {
    $result: $result + str-slice($string, $i, $i);
  }
  @return $result;
}

// 反向查找字符串
// $string = "xxx hello world"，$substring = "hello"
// $re-string = "dlrow olleh xxx"
// $re-substring = "dlrow"
// 查找反转后字符串中的 "dlrow"：str-index($re-string, $re-substring) 返回 1，即 "dlrow" 从反转字符串的第 1 个位置开始。
// 计算原始字符串中的位置：$re-index = str-length("hello world") - str-length("world") - 1 + 2 = 15 - 5 - 1 + 2 = 7
// +2 是修正因为索引从 1 开始计算和 str-slice 的边界问题。

@function str-index-reverse($string, $substring) {
  $re-string: str-reverse($string);
  $re-substring: str-reverse($substring);
  $start: str-index($re-string, $re-substring);
  @if $start == null {
    @return 0;
  }

  $re-index: str-length($string) - str-length($substring) - if($start, $start, 0) + 2; // 11 - 5 -1 +2 = 7
  @return $re-index;
}

// 是否包含字符串
@function str-contains($string, $substring) {
  @if str-index($string, $substring) {
    @return true;
  }
  @return false;
}

// 查找替换
// replace substring with another string
// credits: https://css-tricks.com/snippets/sass/str-replace-function/
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

// 是否包含Modifier
@function contains-modifier($selector) {
  $index: str-index-reverse(str-selector($selector), ' ');
  $selector: if($index > 0, str-slice(str-selector($selector), 0, $index), $selector);
  @return str-contains(str-selector($selector), $modifierSeparator);
}

// 是否包含Element
@function contains-element($selector) {
  $index: str-index-reverse(str-selector($selector), ' ');
  $selector: if($index > 0, str-slice(str-selector($selector), 0, $index), $selector);
  @return str-contains(str-selector($selector), $elementSeparator);
}

// 获取块名
// $selector: '.card__title--large';
// get-block($selector); // 返回 '.card'

@function get-block($selector) {
  $selector: str-selector($selector);
  $parent: str-slice($selector, str-index-reverse($selector, '.'));
  $start: str-length($parent) - 1;

  @if contains-element($parent) {
    $start: str-index($parent, $elementSeparator) - 1;
  } @else if contains-modifier($parent) {
    $start: str-index($parent, $modifierSeparator) - 1;
  }

  $block: str-slice($parent, 0, $start);
  @return $block;
}

// 获取节点列表
// $elementSeparator: "__"; // 元素分隔符
// $elements: ('title', 'desc', 'footer');
// .selector-list {
//   content: get-elements($elements);  ".card__title,.card__desc,.card__footer,";
// }

@function get-elements($elements) {
  $result: '';  // 初始化返回结果为空字符串
  $block: get-block(&);   // 获取当前作用域的 block 名称
  $selector: if(contains-modifier(&), get-block(&), &);

  @each $unit in $elements {
    $element: selector-append($selector, $elementSeparator + $unit);

    @if contains-element($selector) {
      $element: selector-nest($selector, selector-append($block, $elementSeparator + $unit));
    }

    $result: $result + $element + ',';
  }

  @return $result;
}

// $sel: get-selector('.za', '-', 'btn', 'icon', 'input');
// 生成: ".za-btn,.za-icon,.za-input,"
@function get-selector($prefix, $separator, $params...) {
  $selector: '';
  @each $param in $params {
    $selector: $selector + $prefix + $separator + $param + ',';
  }
  @return $selector;
}
