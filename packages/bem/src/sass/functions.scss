// 选择器转字符串
// TODO: $str: str-selector('.button-primary') => button-primary
// 主要是为了去掉引号
@function str-selector($selector) {
  // 使用 inspect($selector) 获取选择器的字符串表示（比如 .class-name 或 #id）。
  $selector: inspect($selector);
  $selector: str-slice($selector, 2, -2);
  @return $selector;
}
// TODO: 输入: 'hello' ==> 输出: 'olleh'
// 反向字符串
@function str-reverse($string) {
  $result: '';
  @for $i from str-length($string) through 1 {
    $result: $result + str-slice($string, $i, $i);
  }
  @return $result;
}

// 即找一个子串在字符串中 最后一次出现的位置
// @debug str-index-reverse("hello world world", "world"); // => 13   （第二个 "world" 的位置）
@function str-index-reverse($string, $substring) {
  // 把字符串和子串都反转
  $re-string: str-reverse($string); // "dlrow dlrow olleh"
  $re-substring: str-reverse($substring); // "dlrow"
  $start: str-index($re-string, $re-substring); // 1
  @if $start == null {
    @return 0;
  }

  $re-index: str-length($string) - str-length($substring) - if($start, $start, 0) + 2; // 17 - 5 - 1 +2 = 13
  @return $re-index;
}

// 是否包含字符串
// $check1: str-contains('hello world', 'world'); // true
@function str-contains($string, $substring) {
  @if str-index($string, $substring) {
    @return true;
  }
  @return false;
}

// 查找替换
// replace substring with another string
// credits: https://css-tricks.com/snippets/sass/str-replace-function/
// 递归实现
// $test2: str-replace("2025-09-29", "-", "/");
// "2025/09/29"
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

// 是否包含Modifier --
// $hasModifier: contains-modifier('.button--primary'); // true
// $hasModifier2: contains-modifier('.button'); // false
@function contains-modifier($selector) {
  $index: str-index-reverse(
    str-selector($selector),
    ' '
  ); // 找到字符串中最后一个空格的位置（逆向查找）。目的：获取选择器中的最后一个“部分”，例如 .foo .bar--modifier → 最后.bar--modifier
  $selector: if($index > 0, str-slice(str-selector($selector), 0, $index), $selector);
  @return str-contains(str-selector($selector), $modifierSeparator);
}

// 是否包含Element __
// $hasElement: contains-element('.card__title'); // true
@function contains-element($selector) {
  $index: str-index-reverse(str-selector($selector), ' ');
  $selector: if($index > 0, str-slice(str-selector($selector), 0, $index), $selector);
  @return str-contains(str-selector($selector), $elementSeparator);
}

// 获取块名
// $selector: '.card__title--large';
// get-block($selector); // 返回 '.card'

@function get-block($selector) {
  $selector: str-selector($selector); //card__title--large
  $parent: str-slice($selector, str-index-reverse($selector, '.')); //'card__title--large'
  $start: str-length($parent) - 1; //17

  @if contains-element($parent) {
    $start: str-index($parent, $elementSeparator) - 1;
  } @else if contains-modifier($parent) {
    $start: str-index($parent, $modifierSeparator) - 1;
  }

  $block: str-slice($parent, 0, $start);
  @return $block;
}

// 假设传入的 $elements 为 ('title', 'image')，当前选择器是 .card，并且没有修饰符，$elementSeparator 是 __：
// $block = 'card'（通过 get-block 获取）。
// $selector = .card（没有修饰符，所以使用当前选择器）。
// 遍历元素列表：
// 对于 title，生成 .card__title。
// 对于 image，生成 .card__image。
// 结果拼接为：'.card__title,.card__image,'。
// 最终返回 '.card__title,.card__image,'。
@function get-elements($elements) {
  $result: ''; // 初始化返回结果为空字符串
  $block: get-block(&); // 获取当前作用域的 block 名称
  $selector: if(contains-modifier(&), get-block(&), &);

  @each $unit in $elements {
    $element: selector-append($selector, $elementSeparator + $unit);

    @if contains-element($selector) {
      $element: selector-nest($selector, selector-append($block, $elementSeparator + $unit));
    }

    $result: $result + $element + ',';
  }

  @return $result;
}

// $sel: get-selector('.za', '-', 'btn', 'icon', 'input');
// 生成: ".za-btn,.za-icon,.za-input,"
@function get-selector($prefix, $separator, $params...) {
  $selector: '';
  @each $param in $params {
    $selector: $selector + $prefix + $separator + $param + ',';
  }
  @return $selector;
}
