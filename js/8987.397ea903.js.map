{"version":3,"file":"js/8987.397ea903.js","mappings":"yGAAA,gmO","sources":["webpack://site/../zarm/src/icon/demo.md"],"sourcesContent":["export default \"# Icon 图标\\r\\n\\r\\n## 基本用法\\r\\n\\r\\n```jsx\\r\\nimport { Grid, Icon } from 'zarm';\\r\\n\\r\\nconst MyIcon = Icon.createFromIconfont(\\r\\n  '//lf1-cdn-tos.bytegoofy.com/obj/iconpark/svg_20337_14.627ee457cf7594fbbce6d5e14b8c29ef.js',\\r\\n); // generated by iconfont.cn\\r\\n\\r\\nReactDOM.render(\\r\\n  <Grid square>\\r\\n    <Grid.Item>\\r\\n      <div className=\\\"block\\\">\\r\\n        <MyIcon type=\\\"home\\\" theme=\\\"primary\\\" />\\r\\n        <span>home</span>\\r\\n      </div>\\r\\n    </Grid.Item>\\r\\n    <Grid.Item>\\r\\n      <div className=\\\"block\\\">\\r\\n        <MyIcon type=\\\"user\\\" theme=\\\"primary\\\" />\\r\\n        <span>user</span>\\r\\n      </div>\\r\\n    </Grid.Item>\\r\\n  </Grid>,\\r\\n  mountNode,\\r\\n);\\r\\n```\\r\\n\\r\\n## 图标主题\\r\\n\\r\\n```jsx\\r\\nimport { Grid, Icon } from 'zarm';\\r\\n\\r\\nconst MyIcon = Icon.createFromIconfont(\\r\\n  '//lf1-cdn-tos.bytegoofy.com/obj/iconpark/svg_20337_14.627ee457cf7594fbbce6d5e14b8c29ef.js',\\r\\n);\\r\\n\\r\\nReactDOM.render(\\r\\n  <Grid square>\\r\\n    <Grid.Item>\\r\\n      <div className=\\\"block\\\">\\r\\n        <MyIcon type=\\\"home\\\" theme=\\\"warning\\\" />\\r\\n        <span>warning</span>\\r\\n      </div>\\r\\n    </Grid.Item>\\r\\n    <Grid.Item>\\r\\n      <div className=\\\"block\\\">\\r\\n        <MyIcon type=\\\"home\\\" theme=\\\"danger\\\" />\\r\\n        <span>danger</span>\\r\\n      </div>\\r\\n    </Grid.Item>\\r\\n    <Grid.Item>\\r\\n      <div className=\\\"block\\\">\\r\\n        <MyIcon type=\\\"home\\\" style={{ color: '#1890ff' }} />\\r\\n        <span>custom color</span>\\r\\n      </div>\\r\\n    </Grid.Item>\\r\\n  </Grid>,\\r\\n  mountNode,\\r\\n);\\r\\n```\\r\\n\\r\\n## 图标尺寸\\r\\n\\r\\n```jsx\\r\\nimport { Grid, Icon } from 'zarm';\\r\\n\\r\\nconst MyIcon = Icon.createFromIconfont(\\r\\n  '//lf1-cdn-tos.bytegoofy.com/obj/iconpark/svg_20337_14.627ee457cf7594fbbce6d5e14b8c29ef.js',\\r\\n);\\r\\n\\r\\nReactDOM.render(\\r\\n  <Grid square>\\r\\n    <Grid.Item>\\r\\n      <div className=\\\"block\\\">\\r\\n        <MyIcon type=\\\"home\\\" theme=\\\"primary\\\" size=\\\"sm\\\" />\\r\\n        <span>sm</span>\\r\\n      </div>\\r\\n    </Grid.Item>\\r\\n    <Grid.Item>\\r\\n      <div className=\\\"block\\\">\\r\\n        <MyIcon type=\\\"home\\\" theme=\\\"primary\\\" />\\r\\n        <span>md</span>\\r\\n      </div>\\r\\n    </Grid.Item>\\r\\n    <Grid.Item>\\r\\n      <div className=\\\"block\\\">\\r\\n        <MyIcon type=\\\"home\\\" theme=\\\"primary\\\" size=\\\"lg\\\" />\\r\\n        <span>lg</span>\\r\\n      </div>\\r\\n    </Grid.Item>\\r\\n  </Grid>,\\r\\n  mountNode,\\r\\n);\\r\\n```\\r\\n\\r\\n## @zarm-design/icons 自带图标\\r\\n\\r\\n```jsx\\r\\nimport { useState } from 'react';\\r\\nimport { Grid, List, Radio } from 'zarm';\\r\\nimport Icons from '@zarm-design/icons';\\r\\n\\r\\nfunction Demo() {\\r\\n  const [mode, setMode] = useState('svg');\\r\\n  return (\\r\\n    <>\\r\\n      <List>\\r\\n        <List.Item\\r\\n          title=\\\"模式\\\"\\r\\n          suffix={\\r\\n            <Radio.Group compact type=\\\"button\\\" onChange={setMode} value={mode}>\\r\\n              <Radio value=\\\"svg\\\">svg</Radio>\\r\\n              <Radio value=\\\"font\\\">font</Radio>\\r\\n            </Radio.Group>\\r\\n          }\\r\\n        />\\r\\n      </List>\\r\\n      <Grid square>\\r\\n        {Object.keys(Icons).map((item, index) => {\\r\\n          if (['Icon', 'Empty', 'IconProvider'].includes(item)) return;\\r\\n          return (\\r\\n            <Grid.Item key={+index}>\\r\\n              <div className=\\\"block\\\">\\r\\n                {React.createElement(Icons[item], {\\r\\n                  key: +index,\\r\\n                  theme: 'primary',\\r\\n                  mode,\\r\\n                })}\\r\\n                <span>{item}</span>\\r\\n              </div>\\r\\n            </Grid.Item>\\r\\n          );\\r\\n        })}\\r\\n      </Grid>\\r\\n    </>\\r\\n  );\\r\\n}\\r\\nReactDOM.render(<Demo />, mountNode);\\r\\n```\\r\\n\\r\\n## 自定义 Iconfont 图标\\r\\n\\r\\n我们提供了一个 createFromIconfont 方法，方便开发者调用在 <a href=\\\"https://www.iconfont.cn\\\" target=\\\"_blank\\\">iconfont.cn</a>、<a href=\\\"https://iconpark.oceanengine.com\\\" target=\\\"_blank\\\">iconpark</a> 等平台上自行管理的图标。\\r\\n\\r\\n其本质上是组件在渲染前会自动引入项目中的图标符号集，并且创建了一个 `<use>` 标签来渲染图标的组件。\\r\\n\\r\\n```jsx\\r\\nimport { Grid, Icon } from 'zarm';\\r\\n\\r\\nconst MyIcon = Icon.createFromIconfont(\\r\\n  '//lf1-cdn-tos.bytegoofy.com/obj/iconpark/svg_20337_14.627ee457cf7594fbbce6d5e14b8c29ef.js',\\r\\n);\\r\\n\\r\\nReactDOM.render(\\r\\n  <Grid square>\\r\\n    <Grid.Item>\\r\\n      <div className=\\\"block\\\">\\r\\n        <MyIcon type=\\\"home\\\" theme=\\\"primary\\\" />\\r\\n        <span>home</span>\\r\\n      </div>\\r\\n    </Grid.Item>\\r\\n    <Grid.Item>\\r\\n      <div className=\\\"block\\\">\\r\\n        <MyIcon type=\\\"user\\\" theme=\\\"primary\\\" />\\r\\n        <span>user</span>\\r\\n      </div>\\r\\n    </Grid.Item>\\r\\n  </Grid>,\\r\\n  mountNode,\\r\\n);\\r\\n```\\r\\n\\r\\n## 自定义 SVG 图标\\r\\n\\r\\n可以通过配置 <a href=\\\"https://github.com/smooth-code/svgr\\\" target=\\\"_blank\\\">svgr</a> 来将 svg 图标作为 React 组件导入。\\r\\n\\r\\n本示例以 webpack 为参考，使用 <a href=\\\"https://www.npmjs.com/package/@svgr/webpack\\\" target=\\\"_blank\\\">@svgr/webpack</a> 来实现，其他实现方式请参阅 <a href=\\\"https://www.smooth-code.com/open-source/svgr/docs/getting-started/\\\" target=\\\"_blank\\\">svgr 文档</a>\\r\\n\\r\\n```js\\r\\n// webpack.config.js\\r\\n// 当你在 React 项目里通过 import MyIcon from './icon.svg'\\r\\n// 引入 SVG 文件时，Webpack 会先用 babel-loader 转 JSX，\\r\\n// 再用 @svgr/webpack 把 SVG 转成可直接使用的 React 组件。\\r\\n// icon: true 让 SVG 尺寸适配字体大小（em），方便做图标。\\r\\n{\\r\\n  test: /\\\\.svg(\\\\?v=\\\\d+\\\\.\\\\d+\\\\.\\\\d+)?$/,\\r\\n  issuer: {\\r\\n    test: /\\\\.jsx?$/,\\r\\n  },\\r\\n  use: [\\r\\n    {\\r\\n      loader: 'babel-loader',\\r\\n    },\\r\\n    {\\r\\n      loader: '@svgr/webpack',\\r\\n      options: {\\r\\n        babel: false,\\r\\n        icon: true,\\r\\n      },\\r\\n    },\\r\\n  ],\\r\\n},\\r\\n```\\r\\n\\r\\n```jsx\\r\\nimport { Icon } from 'zarm';\\r\\nimport { ReactComponent as YourSvg } from 'path/to/yourSvg.svg'; // path to your '*.svg' file.\\r\\n\\r\\nReactDOM.render(<Icon component={YourSvg} />, mountNode);\\r\\n```\\r\\n\\r\\n### 使用 `font` 模式\\r\\n\\r\\n需要手动引入样式文件\\r\\n\\r\\n```\\r\\n  @import \\\"@zarm-design/icons/style/font\\\";\\r\\n```\\r\\n\\r\\n## API\\r\\n\\r\\n| 属性      | 类型                                                           | 默认值      | 说明                                                              |\\r\\n| :-------- | :------------------------------------------------------------- | :---------- | :---------------------------------------------------------------- |\\r\\n| theme     | string                                                         | 'default'   | 主题，可选值 `default`、`primary`、`success`、`warning`、`danger` |\\r\\n| size      | string                                                         | -           | 大小，可选值 `sm`、`lg`                                           |\\r\\n| type      | string                                                         | -           | 图标类型，可选项为来源 iconfont 的图标名称                        |\\r\\n| mode      | string                                                         | 'svg'       | 模式，可选值 `svg`、`font` 自带 icon 可选                         |\\r\\n| component | React.ComponentType&lt;React.SVGProps&lt;SVGSVGElement&gt;&gt; | -           | 本地 svg 文件，需配合 viewBox 使用                                |\\r\\n| viewBox   | string                                                         | '0 0 32 32' | 自定义 SVG 图标时，用来设置画布的起始坐标及大小                   |\\r\\n\\r\\n## CSS 变量\\r\\n\\r\\n| 属性        | 默认值                 | 说明     |\\r\\n| :---------- | :--------------------- | :------- |\\r\\n| --font-size | '24px'                 | 图标大小 |\\r\\n| --color     | 'var(--za-color-text)' | 图标颜色 |\\r\\n\";"],"names":[],"sourceRoot":""}