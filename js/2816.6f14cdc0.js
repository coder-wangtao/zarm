"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[2816],{52816:function(n,r,e){e.r(r),r.default="# SearchBar 搜索框\r\n\r\n## 基本用法\r\n\r\n```jsx\r\nimport { useState, useRef } from 'react';\r\nimport { SearchBar } from 'zarm';\r\n\r\nconst Demo = () => {\r\n  const [value, setValue] = useState('');\r\n\r\n  return (\r\n    <SearchBar\r\n      value={value}\r\n      onChange={(e) => {\r\n        setValue(e.target.value);\r\n        console.log(`onChange: ${e.target.value}`);\r\n      }}\r\n      onFocus={() => {\r\n        console.log('onFocus');\r\n      }}\r\n      onBlur={() => {\r\n        console.log('onBlur');\r\n      }}\r\n      onSubmit={(value) => {\r\n        console.log(`onSubmit: ${value}`);\r\n      }}\r\n      onCancel={() => {\r\n        console.log(`onCancel`);\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## 始终展示取消按钮\r\n\r\n```jsx\r\nimport { useState } from 'react';\r\nimport { SearchBar } from 'zarm';\r\n\r\nconst Demo = () => {\r\n  const [value, setValue] = useState('');\r\n\r\n  return (\r\n    <SearchBar\r\n      showCancel={() => true}\r\n      value={value}\r\n      onChange={(e) => {\r\n        setValue(e.target.value);\r\n        console.log(`onChange: ${e.target.value}`);\r\n      }}\r\n      onSubmit={(value) => {\r\n        console.log(`onSubmit: ${value}`);\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## 获取焦点后展示取消按钮\r\n\r\n```jsx\r\nimport { useState } from 'react';\r\nimport { SearchBar } from 'zarm';\r\n\r\nconst Demo = () => {\r\n  const [value, setValue] = useState('');\r\n\r\n  return (\r\n    <SearchBar\r\n      showCancel\r\n      value={value}\r\n      onChange={(e) => {\r\n        setValue(e.target.value);\r\n        console.log(`onChange: ${e.target.value}`);\r\n      }}\r\n      onSubmit={(value) => {\r\n        console.log(`onSubmit: ${value}`);\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## 多形状\r\n\r\n```jsx\r\nimport { SearchBar } from 'zarm';\r\n\r\nReactDOM.render(\r\n  <>\r\n    <SearchBar shape=\"rect\" />\r\n    <SearchBar shape=\"round\" />\r\n  </>,\r\n  mountNode,\r\n);\r\n```\r\n\r\n## 手动获取焦点\r\n\r\n```jsx\r\nimport { useRef } from 'react';\r\nimport { SearchBar, Button } from 'zarm';\r\n\r\nconst Demo = () => {\r\n  const searchRef = useRef();\r\n\r\n  return (\r\n    <>\r\n      <SearchBar ref={searchRef} />\r\n      <div className=\"button-wrap\">\r\n        <Button\r\n          theme=\"primary\"\r\n          size=\"xs\"\r\n          shape=\"radius\"\r\n          onClick={() => {\r\n            searchRef.current.focus();\r\n          }}\r\n        >\r\n          点击获取焦点\r\n        </Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## 自定义图标\r\n\r\n```jsx\r\nimport { SearchBar, Button } from 'zarm';\r\nimport { WarningCircle } from '@zarm-design/icons';\r\n\r\nconst Demo = () => {\r\n  const [icon, setIcon] = React.useState(<WarningCircle size=\"sm\" />);\r\n\r\n  return (\r\n    <>\r\n      <SearchBar icon={icon} />\r\n      <div className=\"button-wrap\">\r\n        <Button size=\"xs\" shape=\"radius\" onClick={() => setIcon(null)}>\r\n          不显示 Icon\r\n        </Button>\r\n        <Button size=\"xs\" shape=\"radius\" onClick={() => setIcon(undefined)}>\r\n          默认 Icon\r\n        </Button>\r\n        <Button size=\"xs\" shape=\"radius\" onClick={() => setIcon(<WarningCircle size=\"sm\" />)}>\r\n          自定义 Icon\r\n        </Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## API\r\n\r\n| 属性         | 类型                                                    | 默认值                 | 说明                                   |\r\n| :----------- | :------------------------------------------------------ | :--------------------- | :------------------------------------- |\r\n| placeholder  | string                                                  | '搜索'                 | 输入框占位符                           |\r\n| value        | string                                                  | -                      | 值                                     |\r\n| defaultValue | string                                                  | -                      | 初始值                                 |\r\n| shape        | string                                                  | 'radius'               | 形状，可选值 `rect`, `radius`, `round` |\r\n| disabled     | boolean                                                 | false                  | 是否禁用                               |\r\n| showCancel   | boolean \\| ((focus: boolean, value: string) => boolean) | false                  | 是否在搜索框右侧展示取消按钮           |\r\n| cancelText   | React.ReactNode                                         | '取消'                 | 取消按钮显示的内容                     |\r\n| maxLength    | number                                                  | -                      | 输入字数上限                           |\r\n| clearable    | boolean                                                 | true                   | 是否提供清空输入框功能                 |\r\n| icon         | React.ReactNode                                         | \\<Search size=\"sm\" /\\> | 图标                                   |\r\n| onChange     | (event: React.ChangeEvent\\<HTMLInputElement\\>) => void  | -                      | 值变化时触发的回调函数                 |\r\n| onCancel     | () => void                                              | -                      | 点击取消按钮触发的回调函数             |\r\n| onSubmit     | (value: string) => void                                 | -                      | 输入框回车时触发的回调函数             |\r\n| onFocus      | (event: React.FocusEvent\\<HTMLInputElement\\>) => void   | -                      | 获取焦点时触发的回调函数               |\r\n| onBlur       | (event: React.FocusEvent\\<HTMLInputElement\\>) => void   | -                      | 失去焦点时触发的回调函数               |\r\n\r\n## CSS 变量\r\n\r\n| 属性                       | 默认值                      | 说明               |\r\n| :------------------------- | :-------------------------- | :----------------- |\r\n| --background               | 'transparent'               | 背景色             |\r\n| --height                   | '52px'                      | 高度               |\r\n| --padding-horizontal       | '16px'                      | 左右留白内边距     |\r\n| --input-padding-horizontal | '8px'                       | 输入框内边距       |\r\n| --input-height             | '36px'                      | 输入框高度         |\r\n| --input-background         | 'rgba(118, 118, 128, 0.12)' | 输入框背景色       |\r\n| --input-font-size          | 'var(--za-font-size-md)'    | 输入框字体大小     |\r\n| --input-placeholder-color  | '#808084'                   | 输入框占位符颜色   |\r\n| --input-clear-icon-color   | '#8e8e92'                   | 输入框清除图标颜色 |\r\n| --input-border-radius      | '10px'                      | 输入框圆角大小     |\r\n| --cancel-font-size         | 'var(--za-font-size-md)'    | 取消按钮字体大小   |\r\n| --cancel-color             | 'var(--za-theme-primary)'   | 取消按钮字体颜色   |\r\n| --cancel-margin-left       | '13px'                      | 取消按钮左边距     |\r\n| --cancel-transition        | 'all 0.2s'                  | 取消按钮动画       |\r\n| --icon-margin-right        | '6px'                       | 输入框图标右边距   |\r\n| --icon-color               | '#808084'                   | 输入框图标颜色     |\r\n"}}]);