"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[4026],{54026:function(n,r,e){e.r(r),r.default='# Input 文本框\r\n\r\n## 基本用法\r\n\r\n```jsx\r\nimport { useState, useRef } from \'react\';\r\nimport { Input, List, Button } from \'zarm\';\r\n\r\nconst Demo = () => {\r\n  const focusInput = useRef();\r\n  const [title, setTitle] = useState(\'\');\r\n  const [content, setContent] = useState(\'\');\r\n\r\n  return (\r\n    <List>\r\n      <List.Item title="单行文本">\r\n        <Input\r\n          ref={focusInput}\r\n          placeholder="请输入"\r\n          value={title}\r\n          onChange={(e) => {\r\n            const val = e.target.value;\r\n            setTitle(val);\r\n            console.log(`onChange: ${val}`);\r\n          }}\r\n        />\r\n      </List.Item>\r\n      <List.Item title="多行文本">\r\n        <Input\r\n          rows={3}\r\n          placeholder="请输入"\r\n          value={content}\r\n          onChange={(e) => {\r\n            setContent(e.target.value);\r\n          }}\r\n        />\r\n      </List.Item>\r\n      <List.Item>\r\n        <Button\r\n          size="xs"\r\n          theme="primary"\r\n          onClick={() => {\r\n            focusInput.current.focus();\r\n          }}\r\n        >\r\n          click to focus the first input\r\n        </Button>\r\n      </List.Item>\r\n    </List>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## 带清除按钮\r\n\r\n```jsx\r\nimport { useState } from \'react\';\r\nimport { Input, List } from \'zarm\';\r\n\r\nconst Demo = () => {\r\n  const [value, setValue] = useState(\'\');\r\n\r\n  return (\r\n    <List>\r\n      <List.Item title="单行文本">\r\n        <Input\r\n          clearable\r\n          placeholder="输入后右侧可见清除按钮"\r\n          value={value}\r\n          onChange={(e) => {\r\n            setValue(e.target.value);\r\n            console.log(`onChange: ${e.target.value}`);\r\n          }}\r\n        />\r\n      </List.Item>\r\n    </List>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## 原生类型\r\n\r\n```jsx\r\nimport { useState } from \'react\';\r\nimport { Input, List, Icon } from \'zarm\';\r\n\r\nconst PreviewIcon = Icon.createFromIconfont(\r\n  \'//lf1-cdn-tos.bytegoofy.com/obj/iconpark/svg_20337_14.627ee457cf7594fbbce6d5e14b8c29ef.js\',\r\n);\r\n\r\nconst Demo = () => {\r\n  const [password, setPassword] = useState(\'\');\r\n  const [value, setValue] = useState(\'\');\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  return (\r\n    <List>\r\n      <List.Item\r\n        title="密码输入"\r\n        suffix={\r\n          visible ? (\r\n            <PreviewIcon type="preview-open" onClick={() => setVisible(!visible)} />\r\n          ) : (\r\n            <PreviewIcon type="preview-close" onClick={() => setVisible(!visible)} />\r\n          )\r\n        }\r\n      >\r\n        <Input\r\n          type={visible ? \'text\' : \'password\'}\r\n          placeholder="请输入"\r\n          value={password}\r\n          onChange={(e) => {\r\n            setPassword(e.target.value);\r\n          }}\r\n        />\r\n      </List.Item>\r\n      <List.Item title="搜索框">\r\n        <Input\r\n          type="search"\r\n          placeholder="请输入"\r\n          value={value}\r\n          onChange={(e) => {\r\n            setValue(e.target.value);\r\n          }}\r\n        />\r\n      </List.Item>\r\n    </List>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## 只读状态\r\n\r\n```jsx\r\nimport { Input, List } from \'zarm\';\r\n\r\nReactDOM.render(\r\n  <List>\r\n    <List.Item title="单行文本">\r\n      <Input readOnly defaultValue="我是只读状态" />\r\n    </List.Item>\r\n    <List.Item title="多行文本">\r\n      <Input readOnly rows={3} value="我是只读状态，我是只读状态，我是只读状态，我是只读状态。" />\r\n    </List.Item>\r\n  </List>,\r\n  mountNode,\r\n);\r\n```\r\n\r\n## 禁用状态\r\n\r\n```jsx\r\nimport { Input, List } from \'zarm\';\r\n\r\nReactDOM.render(\r\n  <List>\r\n    <List.Item title="单行文本">\r\n      <Input disabled value="我是禁用状态" />\r\n    </List.Item>\r\n    <List.Item title="多行文本">\r\n      <Input disabled rows={3} value="我是禁用状态，我是禁用状态，我是禁用状态，我是禁用状态。" />\r\n    </List.Item>\r\n  </List>,\r\n  mountNode,\r\n);\r\n```\r\n\r\n## 高度自适应\r\n\r\n```jsx\r\nimport { useState } from \'react\';\r\nimport { Input, List } from \'zarm\';\r\n\r\nconst Demo = () => {\r\n  const [value, setValue] = useState(\'\');\r\n\r\n  return (\r\n    <List>\r\n      <List.Item title="多行文本">\r\n        <Input\r\n          autoHeight\r\n          rows={3}\r\n          placeholder="请输入"\r\n          value={value}\r\n          onChange={(e) => {\r\n            setValue(e.target.value);\r\n          }}\r\n        />\r\n      </List.Item>\r\n    </List>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## 显示输入字数\r\n\r\n```jsx\r\nimport { useState } from \'react\';\r\nimport { Input, List } from \'zarm\';\r\n\r\nconst Demo = () => {\r\n  const [value, setValue] = useState(\'\');\r\n\r\n  return (\r\n    <List>\r\n      <List.Item title="多行文本">\r\n        <Input\r\n          autoHeight\r\n          showLength\r\n          maxLength={200}\r\n          rows={3}\r\n          placeholder="请输入"\r\n          value={value}\r\n          onChange={(e) => {\r\n            setValue(e.target.value);\r\n          }}\r\n        />\r\n      </List.Item>\r\n    </List>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## 无标签栏\r\n\r\n```jsx\r\nimport { Input, List } from \'zarm\';\r\n\r\nReactDOM.render(\r\n  <List>\r\n    <List.Item>\r\n      <Input placeholder="标题" />\r\n    </List.Item>\r\n    <List.Item>\r\n      <Input autoHeight rows={4} maxLength={200} placeholder="摘要" />\r\n    </List.Item>\r\n  </List>,\r\n  mountNode,\r\n);\r\n```\r\n\r\n## 上下结构\r\n\r\n```jsx\r\nimport { Input, List } from \'zarm\';\r\n\r\nReactDOM.render(\r\n  <List>\r\n    <List.Item description="最少4个字符，包含大小写英文字母和数字">\r\n      <Input label="账号" placeholder="请输入您的账号" />\r\n    </List.Item>\r\n    <List.Item description="最少8个字符，包含大小写英文字母、数字和字符">\r\n      <Input label="密码" type="password" placeholder="请输入您的密码" />\r\n    </List.Item>\r\n    <List.Item>\r\n      <Input\r\n        label="个人介绍"\r\n        autoHeight\r\n        rows={4}\r\n        maxLength={200}\r\n        placeholder="请输入您的个人介绍"\r\n      />\r\n    </List.Item>\r\n  </List>,\r\n  mountNode,\r\n);\r\n```\r\n\r\n## API\r\n\r\n| 属性         | 类型                                                                          | 默认值 | 说明                                                                     |\r\n| :----------- | :---------------------------------------------------------------------------- | :----- | :----------------------------------------------------------------------- |\r\n| label        | ReactNode                                                                     | -      | 标签栏内容                                                               |\r\n| type         | string                                                                        | \'text\' | 类型，同原生 `input` 组件                                                |\r\n| value        | number \\| string                                                              | -      | 值                                                                       |\r\n| defaultValue | number \\| string                                                              | -      | 初始值                                                                   |\r\n| disabled     | boolean                                                                       | false  | 是否禁用                                                                 |\r\n| readOnly     | boolean                                                                       | false  | 是否只读                                                                 |\r\n| rows         | number                                                                        | -      | 多行文本时的显示行数。type="text" 时有效。                               |\r\n| autoHeight   | boolean                                                                       | false  | 是否高度自适应。多行文本（type="text" 且包含 rows 属性）时有效。         |\r\n| autoFocus    | boolean                                                                       | false  | 是否自动获取焦点                                                         |\r\n| maxLength    | number                                                                        | -      | 输入字数上限                                                             |\r\n| showLength   | boolean                                                                       | false  | 是否显示输入字数。多行文本（type="text" 且包含 rows 属性）时有效。       |\r\n| clearable    | boolean                                                                       | false  | 是否显示清除按钮。必须为受控组件（属性包含 value、onChange）时方可生效。 |\r\n| onChange     | (event: React.ChangeEvent\\<HTMLInputElement \\| HTMLTextAreaElement\\>) => void | -      | 值变化时触发的回调函数                                                   |\r\n\r\n## CSS 变量\r\n\r\n| 属性                        | 默认值                             | 说明                       |\r\n| :-------------------------- | :--------------------------------- | :------------------------- |\r\n| --color                     | \'var(--za-color-text)\'             | 字体颜色                   |\r\n| --font-size                 | \'var(--za-font-size-md)\'           | 字体大小                   |\r\n| --height                    | \'28px\'                             | 输入框高度                 |\r\n| --line-height               | \'28px\'                             | 输入框行高                 |\r\n| --label-font-size           | \'var(--za-font-size-sm)\'           | 标签字体大小               |\r\n| --placeholder-color         | \'var(--za-color-text-placeholder)\' | 占位符字体颜色             |\r\n| --disabled-color            | \'var(--za-color-text-disabled)\'    | 禁用状态下字体颜色         |\r\n| --clear-icon-size           | \'16px\'                             | 清除按钮大小               |\r\n| --clear-icon-color          | \'#ccc\'                             | 清除按钮颜色               |\r\n| --textarea-length-font-size | \'var(--za-font-size-sm)\'           | 多行文本内容长度的字体大小 |\r\n| --textarea-length-color     | \'var(--za-color-text-disabled)\'    | 多行文本内容长度的字体颜色 |\r\n'}}]);