"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[8646],{68646:function(e,r,n){n.r(r),r.default="# Picker 选择器\r\n\r\n## 基本用法\r\n\r\n```jsx\r\nimport { useEffect, useRef, useReducer } from 'react';\r\nimport { List, Button, Picker, Toast } from 'zarm';\r\n\r\nconst SINGLE_DATA = [\r\n  { value: '1', label: '选项一' },\r\n  { value: '2', label: '选项二' },\r\n  { value: '3', label: '选项三' },\r\n  { value: '4', label: '选项四' },\r\n  { value: '5', label: '选项五' },\r\n];\r\n\r\n// 普通多列数据\r\nconst MULTI_DATA = [\r\n  [\r\n    { value: '1', label: '选项一' },\r\n    { value: '2', label: '选项二' },\r\n  ],\r\n  [\r\n    { value: '3', label: '选项A' },\r\n    { value: '4', label: '选项B' },\r\n  ],\r\n];\r\n\r\n// 级联数据\r\nconst CASCADE_DATA = [\r\n  {\r\n    value: '1',\r\n    label: '北京市',\r\n    children: [\r\n      { value: '11', label: '海淀区' },\r\n      { value: '12', label: '西城区' },\r\n    ],\r\n  },\r\n  {\r\n    value: '2',\r\n    label: '上海市',\r\n    children: [\r\n      { value: '21', label: '杨浦区' },\r\n      { value: '22', label: '静安区' },\r\n    ],\r\n  },\r\n];\r\n\r\n// 自定义\r\nconst DIY_DATA = [\r\n  {\r\n    code: '1',\r\n    name: '北京市',\r\n    options: [\r\n      { code: '11', name: '海淀区' },\r\n      { code: '12', name: '西城区' },\r\n    ],\r\n  },\r\n  {\r\n    code: '2',\r\n    name: '上海市',\r\n    options: [\r\n      { code: '21', name: '黄埔区' },\r\n      { code: '22', name: '虹口区' },\r\n    ],\r\n  },\r\n];\r\n\r\nconst initState = {\r\n  single: {\r\n    visible: false,\r\n    value: '',\r\n    dataSource: SINGLE_DATA,\r\n  },\r\n  multi: {\r\n    visible: false,\r\n    value: [],\r\n    dataSource: MULTI_DATA,\r\n  },\r\n  cascade: {\r\n    visible: false,\r\n    value: [],\r\n    dataSource: CASCADE_DATA,\r\n  },\r\n  diy: {\r\n    visible: false,\r\n    value: [],\r\n    dataSource: [],\r\n  },\r\n  specDOM: {\r\n    visible: false,\r\n    value: '',\r\n    dataSource: SINGLE_DATA,\r\n  },\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  const { type, key, value, fieldNames, dataSource } = action;\r\n\r\n  switch (type) {\r\n    case 'visible':\r\n      return {\r\n        ...state,\r\n        [key]: {\r\n          ...state[key],\r\n          visible: !state[key].visible,\r\n        },\r\n      };\r\n\r\n    case 'value':\r\n      return {\r\n        ...state,\r\n        [key]: {\r\n          ...state[key],\r\n          value,\r\n        },\r\n      };\r\n\r\n    case 'fieldNames':\r\n      return {\r\n        ...state,\r\n        [key]: {\r\n          ...state[key],\r\n          fieldNames,\r\n        },\r\n      };\r\n\r\n    case 'dataSource':\r\n      return {\r\n        ...state,\r\n        [key]: {\r\n          ...state[key],\r\n          dataSource,\r\n        },\r\n      };\r\n\r\n    default:\r\n  }\r\n};\r\n\r\nconst Demo = () => {\r\n  const myRef = useRef();\r\n  const [state, dispatch] = useReducer(reducer, initState);\r\n\r\n  const setVisible = (key) => {\r\n    dispatch({ type: 'visible', key });\r\n  };\r\n\r\n  const setValue = (key, value) => {\r\n    dispatch({ type: 'value', key, value });\r\n  };\r\n\r\n  const setFieldNames = (key, fieldNames) => {\r\n    dispatch({ type: 'fieldNames', key, fieldNames });\r\n  };\r\n\r\n  const setDataSource = (key, value) => {\r\n    dispatch({ type: 'dataSource', key, dataSource: value });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // 异步加载数据源测试\r\n    setTimeout(() => {\r\n      setValue('diy', ['1', '12']);\r\n      setDataSource('diy', DIY_DATA);\r\n      setFieldNames('diy', { value: 'code', children: 'options' });\r\n    }, 0);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <List>\r\n        <List.Item\r\n          title=\"单列\"\r\n          suffix={\r\n            <Button size=\"xs\" onClick={() => setVisible('single')}>\r\n              选择\r\n            </Button>\r\n          }\r\n        />\r\n        <List.Item\r\n          title=\"多列\"\r\n          suffix={\r\n            <Button size=\"xs\" onClick={() => setVisible('multi')}>\r\n              选择\r\n            </Button>\r\n          }\r\n        />\r\n        <List.Item\r\n          title=\"级联\"\r\n          suffix={\r\n            <Button size=\"xs\" onClick={() => setVisible('cascade')}>\r\n              选择\r\n            </Button>\r\n          }\r\n        />\r\n        <List.Item\r\n          title=\"自定义\"\r\n          suffix={\r\n            <Button size=\"xs\" onClick={() => setVisible('diy')}>\r\n              选择\r\n            </Button>\r\n          }\r\n        />\r\n        <List.Item\r\n          title=\"挂载到指定dom节点\"\r\n          suffix={\r\n            <Button size=\"xs\" onClick={() => setVisible('specDOM')}>\r\n              选择\r\n            </Button>\r\n          }\r\n        />\r\n      </List>\r\n\r\n      <Picker\r\n        visible={state.single.visible}\r\n        value={state.single.value}\r\n        dataSource={state.single.dataSource}\r\n        onConfirm={(changedValue, items) => {\r\n          console.log('Single Picker onConfirm: ', items);\r\n          Toast.show(JSON.stringify(items));\r\n          setValue('single', changedValue);\r\n          setVisible('single');\r\n        }}\r\n        onCancel={() => setVisible('single')}\r\n      />\r\n\r\n      <Picker\r\n        visible={state.multi.visible}\r\n        value={state.multi.value}\r\n        dataSource={state.multi.dataSource}\r\n        onConfirm={(changedValue, items) => {\r\n          console.log('Multi Picker onConfirm: ', items);\r\n          Toast.show(JSON.stringify(items));\r\n          setValue('multi', changedValue);\r\n          setVisible('multi');\r\n        }}\r\n        onCancel={() => setVisible('multi')}\r\n      />\r\n\r\n      <Picker\r\n        visible={state.cascade.visible}\r\n        value={state.cascade.value}\r\n        dataSource={state.cascade.dataSource}\r\n        onConfirm={(changedValue, items) => {\r\n          console.log('Cascade Picker onConfirm: ', items);\r\n          Toast.show(JSON.stringify(items));\r\n          setValue('cascade', changedValue);\r\n          setVisible('cascade');\r\n        }}\r\n        onCancel={() => setVisible('cascade')}\r\n      />\r\n\r\n      <Picker\r\n        visible={state.diy.visible}\r\n        title=\"custom title\"\r\n        cancelText=\"Cancel\"\r\n        confirmText=\"Ok\"\r\n        fieldNames={state.diy.fieldNames}\r\n        dataSource={state.diy.dataSource}\r\n        value={state.diy.value}\r\n        itemRender={(data) => data.name}\r\n        onConfirm={(changedValue, items) => {\r\n          console.log('DIY Picker onConfirm: ', items);\r\n          Toast.show(JSON.stringify(items));\r\n          setValue('diy', changedValue);\r\n          setVisible('diy');\r\n        }}\r\n        onCancel={() => setVisible('diy')}\r\n      />\r\n\r\n      <Picker\r\n        visible={state.specDOM.visible}\r\n        value={state.specDOM.value}\r\n        dataSource={state.specDOM.dataSource}\r\n        onConfirm={(changedValue, items) => {\r\n          console.log('Picker onConfirm: ', items);\r\n          Toast.show(JSON.stringify(items));\r\n          setValue('specDOM', changedValue);\r\n          setVisible('specDOM');\r\n        }}\r\n        onCancel={() => setVisible('specDOM')}\r\n        mountContainer={() => myRef.current}\r\n      />\r\n\r\n      <div id=\"test-div\" ref={myRef} />\r\n    </>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## Select 表单选择器\r\n\r\n```jsx\r\nimport { useState, useEffect } from 'react';\r\nimport { Select, List } from 'zarm';\r\n\r\n// 级联数据\r\nconst CASCADE_DATA = [\r\n  {\r\n    value: '1',\r\n    label: '北京市',\r\n    children: [\r\n      { value: '11', label: '海淀区' },\r\n      { value: '12', label: '西城区' },\r\n    ],\r\n  },\r\n  {\r\n    value: '2',\r\n    label: '上海市',\r\n    children: [\r\n      { value: '21', label: '杨浦区' },\r\n      { value: '22', label: '静安区' },\r\n    ],\r\n  },\r\n];\r\n\r\nconst Demo = () => {\r\n  const [value, setValue] = useState([]);\r\n  const [dataSource, setDataSource] = useState([]);\r\n  const [wheelDefaultValue, setWheelDefaultValue] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setDataSource(CASCADE_DATA);\r\n      setWheelDefaultValue(['1', '12']);\r\n    }, 0);\r\n  }, []);\r\n\r\n  return (\r\n    <List>\r\n      <List.Item title=\"城市\">\r\n        <Select\r\n          value={value}\r\n          wheelDefaultValue={wheelDefaultValue}\r\n          dataSource={dataSource}\r\n          onConfirm={(changedValue, items) => {\r\n            console.log('Select onConfirm: ', items);\r\n            setValue(changedValue);\r\n          }}\r\n        />\r\n      </List.Item>\r\n    </List>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## 指令式调用\r\n\r\n```jsx\r\nimport { useState, useEffect } from 'react';\r\nimport { List, Picker, Button, Toast } from 'zarm';\r\n\r\n// 级联数据\r\nconst PROMPT_DATA = [\r\n  {\r\n    value: 1,\r\n    label: '北京市',\r\n    children: [\r\n      { value: 11, label: '海淀区' },\r\n      { value: 12, label: '西城区' },\r\n    ],\r\n  },\r\n  {\r\n    value: 2,\r\n    label: '上海市',\r\n    children: [\r\n      { value: 21, label: '杨浦区' },\r\n      { value: 22, label: '静安区' },\r\n    ],\r\n  },\r\n];\r\n\r\nconst Demo = () => {\r\n  const [value, setValue] = useState([]);\r\n\r\n  return (\r\n    <List>\r\n      <List.Item\r\n        title=\"选择城市\"\r\n        suffix={\r\n          <Button\r\n            size=\"xs\"\r\n            onClick={async () => {\r\n              const { value: changedValue, items } = await Picker.prompt({\r\n                value,\r\n                dataSource: PROMPT_DATA,\r\n              });\r\n              if (!changedValue) return;\r\n              setValue(changedValue);\r\n              Toast.show(JSON.stringify(items));\r\n            }}\r\n          >\r\n            选择\r\n          </Button>\r\n        }\r\n      />\r\n    </List>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## PickerView 平铺选择器\r\n\r\n```jsx\r\nimport { useState, useEffect } from 'react';\r\nimport { PickerView } from 'zarm';\r\n\r\n// 级联数据\r\nconst CASCADE_DATA = [\r\n  {\r\n    code: '1',\r\n    label: '北京市',\r\n    children: [\r\n      { code: '11', label: '海淀区' },\r\n      { code: '12', label: '西城区' },\r\n    ],\r\n  },\r\n  {\r\n    code: '2',\r\n    label: '上海市',\r\n    children: [\r\n      { code: '21', label: '杨浦区' },\r\n      { code: '22', label: '静安区' },\r\n    ],\r\n  },\r\n];\r\n\r\nconst Demo = () => {\r\n  const [value, setValue] = useState('');\r\n  const [dataSource, setDataSource] = useState([]);\r\n  const [fieldNames, setFieldNames] = useState({});\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setValue(['1', '12']);\r\n      setFieldNames({ value: 'code' });\r\n      setDataSource(CASCADE_DATA);\r\n    }, 0);\r\n  }, []);\r\n\r\n  return (\r\n    <PickerView\r\n      value={value}\r\n      fieldNames={fieldNames}\r\n      dataSource={dataSource}\r\n      onChange={(changedValue, items) => {\r\n        console.log('PickerView onChange: ', items);\r\n        setValue(changedValue);\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## API\r\n\r\n| 属性              | 类型                                                          | 默认值                                                   | 说明                                     |\r\n| :---------------- | :------------------------------------------------------------ | :------------------------------------------------------- | :--------------------------------------- |\r\n| dataSource        | (PickerViewColumnItem \\| PickerViewOption)[]                  | []                                                       | 数据源                                   |\r\n| value             | PickerValue \\| PickerValue[]                                  | -                                                        | 值                                       |\r\n| defaultValue      | PickerValue \\| PickerValue[]                                  | -                                                        | 初始值                                   |\r\n| wheelDefaultValue | PickerValue \\| PickerValue[]                                  | -                                                        | 滚轮初始停留的位置                       |\r\n| fieldNames        | object                                                        | { label: `label`, value: `value`, children: `children` } | 自定义节点 label、value、children 的字段 |\r\n| itemRender        | (item: PickerViewColumnItem) => ReactNode                     | (data) => data.label                                     | 单个选项的展示                           |\r\n| disabled          | boolean                                                       | false                                                    | 是否禁用                                 |\r\n| cols              | number                                                        | Infinity                                                 | 级联选择器的级数                         |\r\n| onChange          | (value: PickerValue[], items: PickerViewColumnItem[]) => void | -                                                        | 值变化时触发的回调函数                   |\r\n\r\n### 仅 Picker & Select 支持的属性\r\n\r\n| 属性           | 类型                                                          | 默认值              | 说明                                           |\r\n| :------------- | :------------------------------------------------------------ | :------------------ | :--------------------------------------------- |\r\n| title          | string                                                        | '请选择'            | 选择器标题                                     |\r\n| confirmText    | string                                                        | '确定'              | 确定栏文字                                     |\r\n| cancelText     | string                                                        | '取消'              | 取消栏文字                                     |\r\n| maskClosable   | boolean                                                       | true                | 是否点击遮罩层时关闭，需要和 onCancel 一起使用 |\r\n| destroy        | boolean                                                       | false               | 弹层关闭后是否移除节点                         |\r\n| safeArea       | boolean                                                       | false               | 是否适配安全区域                               |\r\n| onConfirm      | (value: PickerValue[], items: PickerViewColumnItem[]) => void | -                   | 点击确定时触发的回调函数                       |\r\n| onCancel       | () => void                                                    | -                   | 点击取消时触发的回调函数                       |\r\n| mountContainer | MountContainer                                                | () => document.body | 指定 Picker 挂载的 HTML 节点                   |\r\n\r\n### 指令式调用\r\n\r\nPicker 支持指令式调用，提供了 `prompt` 方法\r\n\r\n```tsx\r\nprompt: (props: Omit<PickerProps, 'visible' | 'children'>) =>\r\n  Promise<PickerValue[] | null>;\r\n```\r\n\r\n`prompt` 方法的返回值是一个 Promise，如果用户点击了确定，从 Promise 中可以解析到 `PickerValue[]`，而如果用户是触发的取消操作，那么 Promise 中的值是 `null`。你可以通过 `await` 或 `.then()` 来获取到其中的值：\r\n\r\n```tsx\r\nconst value = await Picker.prompt({\r\n  dataSource: dataSourceConfig,\r\n});\r\n\r\nPicker.prompt({\r\n  columns: dataSourceConfig,\r\n}).then((value) => {\r\n  // ...\r\n});\r\n```\r\n\r\n### 仅 Picker 支持的属性\r\n\r\n| 属性    | 类型    | 默认值 | 说明     |\r\n| :------ | :------ | :----- | :------- |\r\n| visible | boolean | false  | 是否展示 |\r\n\r\n### 仅 Select 支持的属性\r\n\r\n| 属性          | 类型                                            | 默认值                                         | 说明         |\r\n| :------------ | :---------------------------------------------- | :--------------------------------------------- | :----------- |\r\n| placeholder   | string                                          | '请选择'                                       | 输入提示信息 |\r\n| displayRender | (selected: PickerViewColumnItem[]) => ReactNode | selected => dataSource.map(item => item.label) | 所选值的展示 |\r\n\r\n### PickerValue\r\n\r\n`string | number | boolean`\r\n\r\n### PickerViewColumnItem\r\n\r\n| 属性  | 类型            | 默认值 | 说明         |\r\n| :---- | :-------------- | :----- | :----------- |\r\n| value | PickerValue     | -      | 选项值       |\r\n| label | React.ReactNode | -      | 选项显示名称 |\r\n\r\n### PickerViewOption\r\n\r\n| 属性     | 类型               | 默认值 | 说明         |\r\n| :------- | :----------------- | :----- | :----------- |\r\n| value    | PickerValue        | -      | 选项值       |\r\n| label    | React.ReactNode    | -      | 选项显示名称 |\r\n| children | PickerViewOption[] | -      | 子选项       |\r\n\r\n## CSS 变量\r\n\r\n### PickerView\r\n\r\n| 属性                                | 默认值                          | 说明                 |\r\n| :---------------------------------- | :------------------------------ | :------------------- |\r\n| --background                        | '#fff'                          | 内容区域背景         |\r\n| --padding                           | '16px'                          | 内容区域内边距       |\r\n| --mask-start-background             | 'rgba(255, 255, 255, 0.4)'      | 内容区域头部蒙层背景 |\r\n| --mask-end-background               | 'rgba(255, 255, 255, 0.8)'      | 内容区域底部蒙层背景 |\r\n| --wheel-item-rows                   | 5                               | 滚轮元素长度         |\r\n| --wheel-item-height                 | '34px'                          | 滚轮元素高度         |\r\n| --wheel-item-font-size              | '20px'                          | 滚轮元素文字大小     |\r\n| --wheel-item-text-color             | 'var(--za-color-text)'          | 滚轮元素文字颜色     |\r\n| --wheel-item-disabled-text-color    | 'var(--za-color-text-disabled)' | 滚轮元素文字禁用颜色 |\r\n| --wheel-item-selected-background    | 'rgba(116, 116, 128, 0.08)'     | 滚轮元素文字选中背景 |\r\n| --wheel-item-selected-border-radius | '7px'                           | 滚轮元素文字选中圆角 |\r\n\r\n### Picker\r\n\r\n| 属性                                | 默认值                          | 说明                 |\r\n| :---------------------------------- | :------------------------------ | :------------------- |\r\n| --header-height                     | '45px'                          | 头部高度             |\r\n| --header-font-size                  | '16px'                          | 头部文字大小         |\r\n| --header-background                 | '#f7f7f7'                       | 头部背景             |\r\n| --header-title-text-color           | 'var(--za-color-text)'          | 头部标题文字颜色     |\r\n| --header-submit-text-color          | 'var(--za-theme-primary)'       | 头部提交按钮文字颜色 |\r\n| --header-cancel-text-color          | 'var(--za-color-text-caption)'  | 头部取消按钮文字颜色 |\r\n| --content-background                | '#fff'                          | 内容区域背景         |\r\n| --content-padding                   | '16px'                          | 内容区域内边距       |\r\n| --content-mask-start-background     | 'rgba(255, 255, 255, 0.4)'      | 内容区域头部蒙层背景 |\r\n| --content-mask-end-background       | 'rgba(255, 255, 255, 0.8)'      | 内容区域底部蒙层背景 |\r\n| --wheel-item-rows                   | 5                               | 滚轮元素长度         |\r\n| --wheel-item-height                 | '34px'                          | 滚轮元素高度         |\r\n| --wheel-item-font-size              | '20px'                          | 滚轮元素文字大小     |\r\n| --wheel-item-text-color             | 'var(--za-color-text)'          | 滚轮元素文字颜色     |\r\n| --wheel-item-disabled-text-color    | 'var(--za-color-text-disabled)' | 滚轮元素文字禁用颜色 |\r\n| --wheel-item-selected-background    | 'rgba(116, 116, 128, 0.08)'     | 滚轮元素文字选中背景 |\r\n| --wheel-item-selected-border-radius | '7px'                           | 滚轮元素文字选中圆角 |\r\n\r\n### Select\r\n\r\n| 属性                | 默认值                             | 说明               |\r\n| :------------------ | :--------------------------------- | :----------------- |\r\n| --header-height     | '45px'                             | 头部高度           |\r\n| --height            | '28px'                             | 输入框高度         |\r\n| --disabled-color    | 'var(--za-color-text-disabled)'    | 输入框禁用文字颜色 |\r\n| --placeholder-color | 'var(--za-color-text-placeholder)' | 输入框占位文字颜色 |\r\n| --arrow-color       | 'var(--za-arrow-color)'            | 输入框箭头         |\r\n| --arrow-size        | 'var(--za-arrow-size)'             | 输入框箭头尺寸     |\r\n| --arrow-width       | 'var(--za-arrow-width)'            | 输入框箭头宽度     |\r\n"}}]);