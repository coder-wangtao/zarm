{"version":3,"file":"js/8059.1fa5cb24.js","mappings":"0GAAA,2yQ","sources":["webpack://site/../zarm/src/toast/demo.md"],"sourcesContent":["export default \"# Toast 轻提示\\r\\n\\r\\n## 基础用法\\r\\n\\r\\n```jsx\\r\\nimport { useState } from 'react';\\r\\nimport { Toast, List, Button } from 'zarm';\\r\\n\\r\\nconst Demo = () => {\\r\\n  return (\\r\\n    <>\\r\\n      <List>\\r\\n        <List.Item\\r\\n          title=\\\"普通\\\"\\r\\n          suffix={\\r\\n            <>\\r\\n              <Button\\r\\n                size=\\\"xs\\\"\\r\\n                onClick={() => {\\r\\n                  Toast.show('提示内容');\\r\\n                }}\\r\\n              >\\r\\n                开启\\r\\n              </Button>\\r\\n            </>\\r\\n          }\\r\\n        />\\r\\n      </List>\\r\\n    </>\\r\\n  );\\r\\n};\\r\\n\\r\\nReactDOM.render(<Demo />, mountNode);\\r\\n```\\r\\n\\r\\n## 带图标提示\\r\\n\\r\\n```jsx\\r\\nimport { useRef } from 'react';\\r\\nimport { Toast, List, Button } from 'zarm';\\r\\nimport { Warning } from '@zarm-design/icons';\\r\\n\\r\\nconst Demo = () => {\\r\\n  return (\\r\\n    <List>\\r\\n      <List.Item\\r\\n        title=\\\"加载中\\\"\\r\\n        suffix={\\r\\n          <Button\\r\\n            size=\\\"xs\\\"\\r\\n            onClick={() => {\\r\\n              Toast.show({\\r\\n                icon: 'loading',\\r\\n              });\\r\\n            }}\\r\\n            style={{ marginLeft: 12 }}\\r\\n          >\\r\\n            开启\\r\\n          </Button>\\r\\n        }\\r\\n      />\\r\\n      <List.Item\\r\\n        title=\\\"成功\\\"\\r\\n        suffix={\\r\\n          <Button\\r\\n            size=\\\"xs\\\"\\r\\n            onClick={() => {\\r\\n              Toast.show({\\r\\n                icon: 'success',\\r\\n                content: '预约成功',\\r\\n              });\\r\\n            }}\\r\\n          >\\r\\n            开启\\r\\n          </Button>\\r\\n        }\\r\\n      />\\r\\n      <List.Item\\r\\n        title=\\\"失败\\\"\\r\\n        suffix={\\r\\n          <Button\\r\\n            size=\\\"xs\\\"\\r\\n            onClick={() => {\\r\\n              Toast.show({\\r\\n                icon: 'fail',\\r\\n                content: '预约失败',\\r\\n              });\\r\\n            }}\\r\\n            style={{ marginLeft: 12 }}\\r\\n          >\\r\\n            开启\\r\\n          </Button>\\r\\n        }\\r\\n      />\\r\\n      <List.Item\\r\\n        title=\\\"自定义\\\"\\r\\n        suffix={\\r\\n          <Button\\r\\n            size=\\\"xs\\\"\\r\\n            onClick={() => {\\r\\n              Toast.show({\\r\\n                icon: <Warning />,\\r\\n                content: '自定义内容',\\r\\n              });\\r\\n            }}\\r\\n            style={{ marginLeft: 12 }}\\r\\n          >\\r\\n            开启\\r\\n          </Button>\\r\\n        }\\r\\n      />\\r\\n    </List>\\r\\n  );\\r\\n};\\r\\n\\r\\nReactDOM.render(<Demo />, mountNode);\\r\\n```\\r\\n\\r\\n## 更多用法\\r\\n\\r\\n```jsx\\r\\nimport { useRef, useState, useEffect } from 'react';\\r\\nimport { Toast, List, Button } from 'zarm';\\r\\nimport { Star } from '@zarm-design/icons';\\r\\n\\r\\nconst Countdown = (props) => {\\r\\n  const [count, setCount] = useState(props.count);\\r\\n\\r\\n  useEffect(() => {\\r\\n    const timer = setInterval(() => {\\r\\n      setCount((value) => {\\r\\n        if (value > 1) return value - 1;\\r\\n        return value;\\r\\n      });\\r\\n    }, 1000);\\r\\n\\r\\n    return () => {\\r\\n      window.clearInterval(timer);\\r\\n    };\\r\\n  }, []);\\r\\n\\r\\n  return <span>{count} 秒后跳转</span>;\\r\\n};\\r\\n\\r\\nconst Demo = () => {\\r\\n  const containerRef = useRef(null);\\r\\n\\r\\n  return (\\r\\n    <List>\\r\\n      <List.Item\\r\\n        suffix={\\r\\n          <Button\\r\\n            size=\\\"xs\\\"\\r\\n            onClick={() => {\\r\\n              Toast.show({\\r\\n                content: '挂载在指定的 div 元素上',\\r\\n                mountContainer: containerRef.current,\\r\\n              });\\r\\n            }}\\r\\n          >\\r\\n            开启\\r\\n          </Button>\\r\\n        }\\r\\n      >\\r\\n        <div ref={containerRef}>指定挂载节点</div>\\r\\n      </List.Item>\\r\\n      <List.Item\\r\\n        title=\\\"阻止背景点击\\\"\\r\\n        suffix={\\r\\n          <Button\\r\\n            size=\\\"xs\\\"\\r\\n            onClick={() => {\\r\\n              Toast.show({\\r\\n                content: '不可同时进行其他交互',\\r\\n                maskClickable: false,\\r\\n              });\\r\\n            }}\\r\\n          >\\r\\n            开启\\r\\n          </Button>\\r\\n        }\\r\\n      />\\r\\n      <List.Item\\r\\n        title=\\\"动态内容\\\"\\r\\n        suffix={\\r\\n          <Button\\r\\n            size=\\\"xs\\\"\\r\\n            onClick={() => {\\r\\n              Toast.show({\\r\\n                icon: 'loading',\\r\\n                content: <Countdown count={5} />,\\r\\n                duration: 5000,\\r\\n              });\\r\\n            }}\\r\\n          >\\r\\n            开启\\r\\n          </Button>\\r\\n        }\\r\\n      />\\r\\n    </List>\\r\\n  );\\r\\n};\\r\\n\\r\\nReactDOM.render(<Demo />, mountNode);\\r\\n```\\r\\n\\r\\n## 销毁\\r\\n\\r\\n```jsx\\r\\nimport { useRef } from 'react';\\r\\nimport { Toast, List, Button } from 'zarm';\\r\\nimport { Star } from '@zarm-design/icons';\\r\\n\\r\\nconst Demo = () => {\\r\\n  const ref = React.useRef();\\r\\n\\r\\n  return (\\r\\n    <List>\\r\\n      <List.Item>\\r\\n        <Button\\r\\n          size=\\\"xs\\\"\\r\\n          onClick={() => {\\r\\n            ref.current = Toast.show({\\r\\n              content: '提示内容不会消失',\\r\\n              duration: 0,\\r\\n            });\\r\\n          }}\\r\\n        >\\r\\n          开启\\r\\n        </Button>\\r\\n        <Button\\r\\n          size=\\\"xs\\\"\\r\\n          onClick={() => {\\r\\n            ref.current?.close();\\r\\n          }}\\r\\n          style={{ marginLeft: 12 }}\\r\\n        >\\r\\n          关闭\\r\\n        </Button>\\r\\n        <Button\\r\\n          size=\\\"xs\\\"\\r\\n          onClick={() => {\\r\\n            Toast.clear();\\r\\n          }}\\r\\n          style={{ marginLeft: 12 }}\\r\\n        >\\r\\n          全部清除\\r\\n        </Button>\\r\\n      </List.Item>\\r\\n    </List>\\r\\n  );\\r\\n};\\r\\n\\r\\nReactDOM.render(<Demo />, mountNode);\\r\\n```\\r\\n\\r\\n## API\\r\\n\\r\\n| 属性           | 类型                                                | 默认值              | 说明                               |\\r\\n| :------------- | :-------------------------------------------------- | :------------------ | :--------------------------------- |\\r\\n| visible        | boolean                                             | false               | 是否展示                           |\\r\\n| icon           | 'success' \\\\| 'fail' \\\\| 'loading' \\\\| React.ReactNode | -                   | 显示的图标                         |\\r\\n| content        | React.ReactNode                                     | -                   | 显示的内容                         |\\r\\n| duration       | number                                              | 2000                | 自动关闭前停留的时间（单位：毫秒） |\\r\\n| mask           | boolean                                             | false               | 是否展示遮罩层                     |\\r\\n| maskClassName  | string                                              | -                   | 遮罩层样式名                       |\\r\\n| maskStyle      | React.CSSProperties                                 | -                   | 遮罩层样式                         |\\r\\n| maskColor      | string                                              | -                   | 遮罩层的背景色                     |\\r\\n| maskOpacity    | string \\\\| number                                    | -                   | 遮罩层的透明度                     |\\r\\n| maskClickable  | boolean                                             | true                | 是否允许背景点击                   |\\r\\n| onMaskClick    | () => void                                          | -                   | 点击遮罩层时触发的回调函数         |\\r\\n| onOpen         | () => void                                          | -                   | Toast 显示的回调函数               |\\r\\n| onClose        | () => void                                          | -                   | Toast 隐藏的回调函数               |\\r\\n| afterOpen      | () => void                                          | -                   | Toast 显示后的回调函数             |\\r\\n| afterClose     | () => void                                          | -                   | Toast 隐藏后的回调函数             |\\r\\n| mountContainer | MountContainer                                      | () => document.body | 指定 Toast 挂载的 HTML 节点        |\\r\\n\\r\\n## 指令式 API\\r\\n\\r\\nToast 仅支持指令式调用\\r\\n\\r\\n### Toast.show\\r\\n\\r\\n同时间只允许弹出一个轻提示，新出现的 Toast 会将之前正在显示中的 Toast 销毁。\\r\\n\\r\\nshow 方法的返回值为一个对象，包含以下属性：\\r\\n\\r\\n| 属性  | 类型       | 说明             |\\r\\n| :---- | :--------- | :--------------- |\\r\\n| close | () => void | 关闭当前的 Toast |\\r\\n\\r\\n### Toast.clear\\r\\n\\r\\n关闭所有显示中的 Toast。\\r\\n\\r\\n### Toast.config\\r\\n\\r\\n设置全局配置，支持配置 `duration`、`mask`、`maskClassName`、`maskStyle`、`maskColor`、`maskOpacity`、`maskClickable` 和 `mountContainer`。配置方法如下：\\r\\n\\r\\n```tsx\\r\\nToast.config({ duration: 3000 maskColor: 'black' });\\r\\n```\\r\\n\";"],"names":[],"sourceRoot":""}