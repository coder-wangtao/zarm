"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[4132],{94132:function(r,n,e){e.r(n),n.default="# Cascader 级联选择器\r\n\r\n## 基本用法\r\n\r\n```jsx\r\nimport { useState } from 'react';\r\nimport { Cascader, List, Button } from 'zarm';\r\n\r\nconst Demo = () => {\r\n  const [visible, setVisible] = useState(false);\r\n  const [value, setValue] = useState([]);\r\n\r\n  const District = [\r\n    {\r\n      value: '340000',\r\n      label: '安徽省',\r\n      children: [\r\n        {\r\n          value: '340800',\r\n          label: '安庆市',\r\n          children: [\r\n            {\r\n              value: '340803',\r\n              label: '大观区',\r\n              children: [],\r\n            },\r\n            {\r\n              value: '340822',\r\n              label: '怀宁县',\r\n              children: [],\r\n            },\r\n            {\r\n              value: '340882',\r\n              label: '其它区',\r\n              children: [],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      value: '310000',\r\n      label: '上海',\r\n      children: [\r\n        {\r\n          value: '310100',\r\n          label: '上海市',\r\n          children: [\r\n            {\r\n              value: '310113',\r\n              label: '宝山区',\r\n              children: [],\r\n            },\r\n            {\r\n              value: '310105',\r\n              label: '长宁区',\r\n              children: [],\r\n            },\r\n            {\r\n              value: '310230',\r\n              label: '崇明县',\r\n              children: [],\r\n            },\r\n            {\r\n              value: '310152',\r\n              label: '川沙区',\r\n              children: [],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <List>\r\n        <List.Item\r\n          title=\"普通\"\r\n          suffix={\r\n            <Button size=\"xs\" onClick={() => setVisible(true)}>\r\n              选择\r\n            </Button>\r\n          }\r\n        >\r\n          {value.join(',')}\r\n        </List.Item>\r\n      </List>\r\n\r\n      <Cascader\r\n        maskClosable\r\n        visible={visible}\r\n        value={value}\r\n        title=\"级联选择器\"\r\n        dataSource={District}\r\n        onChange={(value, items) => {\r\n          console.log('onChange', value, items);\r\n        }}\r\n        onConfirm={(value, items) => {\r\n          console.log('onConfirm', value, items);\r\n          setValue(value);\r\n          setVisible(false);\r\n        }}\r\n        onCancel={() => {\r\n          console.log('onCancel');\r\n          setVisible(false);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## 指令式\r\n\r\n```jsx\r\nimport { useState, useEffect } from 'react';\r\nimport { List, Cascader, Button, Toast } from 'zarm';\r\n\r\nconst PROMPT_DATA = [\r\n  {\r\n    value: '340000',\r\n    label: '安徽省',\r\n    children: [\r\n      {\r\n        value: '340800',\r\n        label: '安庆市',\r\n        children: [\r\n          {\r\n            value: '340803',\r\n            label: '大观区',\r\n            children: [],\r\n          },\r\n          {\r\n            value: '340822',\r\n            label: '怀宁县',\r\n            children: [],\r\n          },\r\n          {\r\n            value: '340882',\r\n            label: '其它区',\r\n            children: [],\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    value: '310000',\r\n    label: '上海',\r\n    children: [\r\n      {\r\n        value: '310100',\r\n        label: '上海市',\r\n        children: [\r\n          {\r\n            value: '310113',\r\n            label: '宝山区',\r\n            children: [],\r\n          },\r\n          {\r\n            value: '310105',\r\n            label: '长宁区',\r\n            children: [],\r\n          },\r\n          {\r\n            value: '310230',\r\n            label: '崇明县',\r\n            children: [],\r\n          },\r\n          {\r\n            value: '310152',\r\n            label: '川沙区',\r\n            children: [],\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nconst Demo = () => {\r\n  const [value, setValue] = useState([]);\r\n\r\n  return (\r\n    <List>\r\n      <List.Item\r\n        title=\"选择城市\"\r\n        suffix={\r\n          <Button\r\n            size=\"xs\"\r\n            onClick={async () => {\r\n              const { value: changedValue } = await Cascader.prompt({\r\n                value,\r\n                dataSource: PROMPT_DATA,\r\n              });\r\n              if (!changedValue) return;\r\n              setValue(changedValue);\r\n              Toast.show(JSON.stringify(changedValue));\r\n            }}\r\n          >\r\n            选择\r\n          </Button>\r\n        }\r\n      />\r\n    </List>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## CascaderView 级联选择视图\r\n\r\n```jsx\r\nimport { useState } from 'react';\r\nimport { CascaderView } from 'zarm';\r\n\r\nconst Demo = () => {\r\n  const [value, setValue] = useState([]);\r\n\r\n  const District = [\r\n    {\r\n      value: '340000',\r\n      label: '安徽省',\r\n      children: [\r\n        {\r\n          value: '340800',\r\n          label: '安庆市',\r\n          children: [\r\n            {\r\n              value: '340803',\r\n              label: '大观区',\r\n              children: [],\r\n            },\r\n            {\r\n              value: '340822',\r\n              label: '怀宁县',\r\n              children: [],\r\n            },\r\n            {\r\n              value: '340882',\r\n              label: '其它区',\r\n              children: [],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      value: '310000',\r\n      label: '上海',\r\n      children: [\r\n        {\r\n          value: '310100',\r\n          label: '上海市',\r\n          children: [\r\n            {\r\n              value: '310113',\r\n              label: '宝山区',\r\n              children: [],\r\n            },\r\n            {\r\n              value: '310105',\r\n              label: '长宁区',\r\n              children: [],\r\n            },\r\n            {\r\n              value: '310230',\r\n              label: '崇明县',\r\n              children: [],\r\n            },\r\n            {\r\n              value: '310152',\r\n              label: '川沙区',\r\n              children: [],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <CascaderView\r\n      value={value}\r\n      dataSource={District}\r\n      onChange={(value, items) => {\r\n        console.log('onChange', value, items);\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## API\r\n\r\n| 属性         | 类型                             | 默认值                                                   | 说明                                     |\r\n| :----------- | :------------------------------- | :------------------------------------------------------- | :--------------------------------------- |\r\n| dataSource   | CascaderOption[]                 | []                                                       | 数据源                                   |\r\n| defaultValue | CascaderValue[]                  | -                                                        | 初始值                                   |\r\n| value        | CascaderValue[]                  | -                                                        | 值                                       |\r\n| fieldNames   | object                           | { label: `label`, value: `value`, children: `children` } | 自定义节点 label、value、children 的字段 |\r\n| itemRender   | (data?: object) => data.label    | (data?: object) => data.label                            | 单个选项的展示                           |\r\n| onChange     | (value: CascaderValue[]) => void | -                                                        | 值变化时触发的回调函数                   |\r\n\r\n### 指令式调用\r\n\r\nCascader 支持指令式调用，提供了 `prompt` 方法\r\n\r\n```tsx\r\nprompt: (props: Omit<CascaderProps, 'visible' | 'visible' | 'children'>) =>\r\n  Promise<CascaderValue[] | null>;\r\n```\r\n\r\n`prompt` 方法的返回值是一个 Promise，如果用户点击了确定，从 Promise 中可以解析到 `CascaderValue[]`，而如果用户是触发的取消操作，那么 Promise 中的值是 `null`。你可以通过 `await` 或 `.then()` 来获取到其中的值：\r\n\r\n```tsx\r\nconst value = await Cascader.prompt({\r\n  dataSource: dataSourceConfig,\r\n});\r\n\r\nCascader.prompt({\r\n  columns: dataSourceConfig,\r\n}).then((value) => {\r\n  // ...\r\n});\r\n```\r\n\r\n### 仅 Cascader 支持的属性\r\n\r\n| 属性         | 类型                             | 默认值   | 说明                                           |\r\n| :----------- | :------------------------------- | :------- | :--------------------------------------------- |\r\n| visible      | boolean                          | false    | 是否展示                                       |\r\n| title        | string                           | '请选择' | 选择器标题                                     |\r\n| confirmText  | string                           | '确定'   | 确定栏文字                                     |\r\n| cancelText   | string                           | '取消'   | 取消栏文字                                     |\r\n| maskClosable | boolean                          | true     | 是否点击遮罩层时关闭，需要和 onCancel 一起使用 |\r\n| safeArea     | boolean                          | false    | 是否适配安全区域                               |\r\n| onConfirm    | (value: CascaderValue[]) => void | -        | 点击确定时触发的回调函数                       |\r\n| onCancel     | () => void                       | -        | 点击取消时触发的回调函数                       |\r\n\r\n### CascaderValue\r\n\r\n`string | number`\r\n\r\n### CascaderOption\r\n\r\n| 属性     | 类型             | 默认值 | 说明         |\r\n| :------- | :--------------- | :----- | :----------- |\r\n| value    | CascaderValue    | -      | 选项值       |\r\n| label    | React.ReactNode  | -      | 选项显示名称 |\r\n| children | CascaderOption[] | -      | 子选项       |\r\n\r\n## CSS 变量\r\n\r\n### Cascader\r\n\r\n| 属性                       | 默认值                         | 说明                 |\r\n| :------------------------- | :----------------------------- | :------------------- |\r\n| --header-height            | '45px'                         | 头部高度             |\r\n| --header-font-size         | '16px'                         | 头部文字大小         |\r\n| --header-background        | '#f7f7f7'                      | 头部背景             |\r\n| --header-title-text-color  | 'var(--za-color-text)'         | 头部标题文字颜色     |\r\n| --header-submit-text-color | 'var(--za-theme-primary)'      | 头部提交按钮文字颜色 |\r\n| --header-cancel-text-color | 'var(--za-color-text-caption)' | 头部取消按钮文字颜色 |\r\n\r\n### CascaderView\r\n\r\n| 属性                       | 默认值                             | 说明             |\r\n| :------------------------- | :--------------------------------- | :--------------- |\r\n| --background               | '#fff'                             | 弹层背景         |\r\n| --padding                  | 'var(--za-padding-v-sm)'           | 选项内边距       |\r\n| --tab-text-color           | 'var(--za-color-text-placeholder)' | 标签文字颜色     |\r\n| --tab-active-text-color    | 'var(--za-theme-primary)'          | 标签选中文字颜色 |\r\n| --options-height           | '300px'                            | 选项面板高度     |\r\n| --option-font-size         | 'var(--za-font-size-sm)'           | 选项字体大小     |\r\n| --option-height            | '44px'                             | 选项高度         |\r\n| --option-text-color        | 'var(--za-color-text)'             | 选项文字颜色     |\r\n| --option-active-text-color | 'var(--za-theme-primary)'          | 选项选中文字颜色 |\r\n"}}]);