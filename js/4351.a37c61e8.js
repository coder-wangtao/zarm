"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[4351],{14351:function(r,n,e){e.r(n),n.default='# TabBar 标签栏\r\n\r\n## 基本用法\r\n\r\n```jsx\r\nimport { useState } from \'react\';\r\nimport { Icon, TabBar, List, Button } from \'zarm\';\r\n\r\nconst TabIcon = Icon.createFromIconfont(\r\n  \'//lf1-cdn-tos.bytegoofy.com/obj/iconpark/svg_20337_14.627ee457cf7594fbbce6d5e14b8c29ef.js\',\r\n);\r\n\r\nconst Demo = () => {\r\n  const [activeKey, setActiveKey] = useState(\'home\');\r\n\r\n  return (\r\n    <>\r\n      <TabBar activeKey={activeKey} onChange={setActiveKey}>\r\n        <TabBar.Item itemKey="home" title="首页" icon={<TabIcon type="home" />} />\r\n        <TabBar.Item\r\n          itemKey="found"\r\n          title="项目"\r\n          icon={<TabIcon type="menu" />}\r\n          // badge={{ shape: \'circle\', text: \'3\' }}\r\n        />\r\n        <TabBar.Item\r\n          itemKey="me"\r\n          title="我的"\r\n          icon={<TabIcon type="user" />}\r\n          // badge={{ shape: \'dot\' }}\r\n        />\r\n      </TabBar>\r\n    </>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## 徽标\r\n\r\n```jsx\r\nimport { useState } from \'react\';\r\nimport { Icon, TabBar, List, Button } from \'zarm\';\r\n\r\nconst TabIcon = Icon.createFromIconfont(\r\n  \'//lf1-cdn-tos.bytegoofy.com/obj/iconpark/svg_20337_14.627ee457cf7594fbbce6d5e14b8c29ef.js\',\r\n);\r\n\r\nconst Demo = () => {\r\n  return (\r\n    <>\r\n      <TabBar>\r\n        <TabBar.Item itemKey="home" title="首页" icon={<TabIcon type="home" />} />\r\n        <TabBar.Item\r\n          itemKey="found"\r\n          title="项目"\r\n          icon={<TabIcon type="menu" />}\r\n          badge={{ shape: \'circle\', text: 3 }}\r\n        />\r\n        <TabBar.Item\r\n          itemKey="me"\r\n          title="我的"\r\n          icon={<TabIcon type="user" />}\r\n          badge={{ shape: \'dot\' }}\r\n        />\r\n      </TabBar>\r\n    </>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## 仅图标\r\n\r\n```jsx\r\nimport { useState } from \'react\';\r\nimport { Icon, TabBar, List, Button } from \'zarm\';\r\n\r\nconst TabIcon = Icon.createFromIconfont(\r\n  \'//lf1-cdn-tos.bytegoofy.com/obj/iconpark/svg_20337_14.627ee457cf7594fbbce6d5e14b8c29ef.js\',\r\n);\r\n\r\nconst Demo = () => {\r\n  return (\r\n    <>\r\n      <TabBar>\r\n        <TabBar.Item itemKey="home" icon={<TabIcon type="home" />} />\r\n        <TabBar.Item itemKey="found" icon={<TabIcon type="menu" />} />\r\n        <TabBar.Item itemKey="me" icon={<TabIcon type="user" />} />\r\n      </TabBar>\r\n    </>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## 仅标题\r\n\r\n```jsx\r\nimport { useState } from \'react\';\r\nimport { Icon, TabBar, List, Button } from \'zarm\';\r\n\r\nconst Demo = () => {\r\n  return (\r\n    <>\r\n      <TabBar>\r\n        <TabBar.Item itemKey="home" title="首页" />\r\n        <TabBar.Item itemKey="found" title="项目" />\r\n        <TabBar.Item itemKey="me" title="我的" />\r\n      </TabBar>\r\n    </>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## 受控模式\r\n\r\n```jsx\r\nimport { useState } from \'react\';\r\nimport { Icon, TabBar, List, Button } from \'zarm\';\r\n\r\nconst TabIcon = Icon.createFromIconfont(\r\n  \'//lf1-cdn-tos.bytegoofy.com/obj/iconpark/svg_20337_14.627ee457cf7594fbbce6d5e14b8c29ef.js\',\r\n);\r\n\r\nconst Demo = () => {\r\n  const [activeKey, setActiveKey] = React.useState(\'me\');\r\n\r\n  return (\r\n    <>\r\n      <TabBar activeKey={activeKey} onChange={setActiveKey} safeArea>\r\n        <TabBar.Item itemKey="home" title="首页" icon={<TabIcon type="home" />} />\r\n        <TabBar.Item itemKey="found" title="项目" icon={<TabIcon type="menu" />} />\r\n        <TabBar.Item itemKey="me" title="我的" icon={<TabIcon type="user" />} />\r\n      </TabBar>\r\n    </>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## 开启安全区域\r\n\r\n```jsx\r\nimport { useState } from \'react\';\r\nimport { Icon, TabBar, List, Button } from \'zarm\';\r\n\r\nconst TabIcon = Icon.createFromIconfont(\r\n  \'//lf1-cdn-tos.bytegoofy.com/obj/iconpark/svg_20337_14.627ee457cf7594fbbce6d5e14b8c29ef.js\',\r\n);\r\n\r\nconst Demo = () => {\r\n  return (\r\n    <>\r\n      <TabBar safeArea>\r\n        <TabBar.Item itemKey="home" title="首页" icon={<TabIcon type="home" />} />\r\n        <TabBar.Item itemKey="found" title="项目" icon={<TabIcon type="menu" />} />\r\n        <TabBar.Item itemKey="me" title="我的" icon={<TabIcon type="user" />} />\r\n      </TabBar>\r\n    </>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## API\r\n\r\n### TabBar\r\n\r\n| 属性             | 类型                              | 默认值 | 说明                       |\r\n| :--------------- | :-------------------------------- | :----- | :------------------------- |\r\n| activeKey        | number \\| string                  | -      | 当前选中项                 |\r\n| defaultActiveKey | number \\| string                  | -      | 初始选中项, 默认第一个选中 |\r\n| onChange         | (value: number \\| string) => void | -      | 值变化时触发的回调函数     |\r\n\r\n### TabBar.Item\r\n\r\n| 属性       | 类型             | 默认值 | 说明                                                 |\r\n| :--------- | :--------------- | :----- | :--------------------------------------------------- |\r\n| itemKey    | number \\| string | -      | 唯一标识，对应`activeKey`，不设置则默认取 index 索引 |\r\n| title      | ReactNode        | -      | 标题文字                                             |\r\n| icon       | ReactNode        | -      | 图标                                                 |\r\n| activeIcon | ReactNode        | -      | 选中时图标，不设置等同 icon 属性的值                 |\r\n| badge      | BadgeProps       | -      | 参考 [Badge](/#/components/badge) 组件               |\r\n\r\n## CSS 变量\r\n\r\n| 属性           | 默认值                  | 说明               |\r\n| :------------- | :---------------------- | :----------------- |\r\n| --background   | \'#fff\'                  | 背景色             |\r\n| --height       | \'50px\'                  | 高度               |\r\n| --color        | var(--za-color-text)    | 字体颜色           |\r\n| --active-color | var(--za-theme-primary) | 选中状态下字体颜色 |\r\n| --font-size    | \'12px\'                  | 字体大小           |\r\n'}}]);