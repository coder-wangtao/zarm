"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[2058],{2058:function(n,r,e){e.r(r),r.default="# ConfigProvider 全局配置\r\n\r\n## 基本用法\r\n\r\n```jsx\r\nimport { useState, useRef } from 'react';\r\nimport {\r\n  ConfigProvider,\r\n  List,\r\n  Button,\r\n  Modal,\r\n  Keyboard,\r\n  Radio,\r\n  Message,\r\n  TabBar,\r\n  Icon,\r\n  Popup,\r\n  Rate,\r\n  Switch,\r\n  SearchBar,\r\n} from 'zarm';\r\nimport enUS from 'zarm/lib/config-provider/locale/en_US';\r\nimport zhCN from 'zarm/lib/config-provider/locale/zh_CN';\r\n\r\nconst TabIcon = Icon.createFromIconfont(\r\n  '//lf1-cdn-tos.bytegoofy.com/obj/iconpark/svg_20337_14.627ee457cf7594fbbce6d5e14b8c29ef.js',\r\n);\r\n\r\nconst colors = ['#00bc70', '#1890ff', '#f5222d', '#fa541b', '#13c2c2', '#2f54ec', '#712fd1'];\r\n\r\nconst Demo = () => {\r\n  const containerRef = useRef();\r\n  const [visiblePopup, setVisiblePopup] = useState(false);\r\n\r\n  const [locale, setLocale] = useState(localStorage.locale || 'zhCN');\r\n  const [primaryColor, setPrimaryColor] = useState(localStorage.primaryColor || colors[0]);\r\n  const [theme, setTheme] = useState(localStorage.theme || 'light');\r\n  const [safeArea, setSafeArea] = useState(true);\r\n  const [mountContainer, setMountContainer] = useState(false);\r\n  const [cssVars, setCssVars] = useState(null);\r\n\r\n  return (\r\n    <>\r\n      <List>\r\n        <List.Item\r\n          title=\"切换语言\"\r\n          suffix={\r\n            <Radio.Group compact type=\"button\" value={locale} onChange={setLocale}>\r\n              <Radio value=\"zhCN\">中文</Radio>\r\n              <Radio value=\"enUS\">EN</Radio>\r\n            </Radio.Group>\r\n          }\r\n        />\r\n        <List.Item\r\n          title=\"切换品牌色\"\r\n          suffix={\r\n            <ul className=\"colors\">\r\n              {colors.map((color, index) => {\r\n                return (\r\n                  <li\r\n                    key={+index}\r\n                    style={{ backgroundColor: color }}\r\n                    onClick={() => setPrimaryColor(color)}\r\n                  />\r\n                );\r\n              })}\r\n            </ul>\r\n          }\r\n        />\r\n        <List.Item\r\n          title=\"切换主题\"\r\n          suffix={\r\n            <Radio.Group compact type=\"button\" value={theme} onChange={(value) => setTheme(value)}>\r\n              <Radio value=\"light\">默认主题</Radio>\r\n              <Radio value=\"dark\">暗黑主题</Radio>\r\n            </Radio.Group>\r\n          }\r\n        />\r\n        <List.Item\r\n          title=\"安全区域开启\"\r\n          suffix={<Switch checked={safeArea} onChange={setSafeArea} />}\r\n        />\r\n        <List.Item\r\n          title=\"自定义弹层渲染节点\"\r\n          suffix={<Switch checked={mountContainer} onChange={setMountContainer} />}\r\n        />\r\n        <List.Item\r\n          title=\"设置 CSS 变量\"\r\n          suffix={\r\n            <Button\r\n              size=\"xs\"\r\n              onClick={() => {\r\n                setCssVars(\r\n                  cssVars\r\n                    ? null\r\n                    : {\r\n                        '--za-theme-primary': '#ff0000',\r\n                        '--za-rate-active-color': '#fa541b',\r\n                      },\r\n                );\r\n              }}\r\n            >\r\n              {cssVars ? '还原' : '设置'}\r\n            </Button>\r\n          }\r\n        />\r\n      </List>\r\n\r\n      <Message theme=\"warning\">以下为组件示例</Message>\r\n\r\n      <ConfigProvider\r\n        locale={locale === 'enUS' ? enUS : zhCN}\r\n        primaryColor={primaryColor}\r\n        theme={theme}\r\n        safeArea={safeArea}\r\n        cssVars={cssVars}\r\n        mountContainer={!mountContainer ? document.body : containerRef.current}\r\n      >\r\n        <div>\r\n          <SearchBar />\r\n          <List>\r\n            <List.Item title={<Switch defaultChecked />} />\r\n            <List.Item title={<Rate defaultValue={3} />} />\r\n            <List.Item\r\n              title=\"确认框\"\r\n              suffix={\r\n                <Button\r\n                  size=\"xs\"\r\n                  onClick={() => {\r\n                    Modal.confirm({\r\n                      title: '确认信息',\r\n                      content: '你确定要这样做吗？',\r\n                      shape: 'radius',\r\n                    });\r\n                  }}\r\n                >\r\n                  开启\r\n                </Button>\r\n              }\r\n            />\r\n            <List.Item\r\n              title=\"弹出层\"\r\n              suffix={\r\n                <Button size=\"xs\" onClick={() => setVisiblePopup(true)}>\r\n                  开启\r\n                </Button>\r\n              }\r\n            />\r\n          </List>\r\n\r\n          <Popup\r\n            visible={visiblePopup}\r\n            direction=\"bottom\"\r\n            onMaskClick={() => setVisiblePopup(false)}\r\n            afterOpen={() => console.log('打开')}\r\n            afterClose={() => console.log('关闭')}\r\n          >\r\n            <div className=\"popup-box\">内容</div>\r\n          </Popup>\r\n\r\n          <TabBar defaultActiveKey=\"home\">\r\n            <TabBar.Item itemKey=\"home\" title=\"首页\" icon={<TabIcon type=\"home\" />} />\r\n            <TabBar.Item\r\n              itemKey=\"found\"\r\n              title=\"项目\"\r\n              icon={<TabIcon type=\"menu\" />}\r\n              badge={{ shape: 'circle', text: '3' }}\r\n            />\r\n            <TabBar.Item\r\n              itemKey=\"me\"\r\n              title=\"我的\"\r\n              icon={<TabIcon type=\"user\" />}\r\n              badge={{ shape: 'dot' }}\r\n            />\r\n          </TabBar>\r\n\r\n          <Button block theme=\"primary\">\r\n            Button\r\n          </Button>\r\n\r\n          <div ref={containerRef} />\r\n        </div>\r\n      </ConfigProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## API\r\n\r\n| 属性            | 类型            | 默认值              | 说明                                                                                                                                |\r\n| :-------------- | :-------------- | :------------------ | :---------------------------------------------------------------------------------------------------------------------------------- |\r\n| prefix          | string          | 'za'                | 组件类名前缀                                                                                                                        |\r\n| locale          | Object          | -                   | 语言包配置，默认为中文，语言包可到 [zarm/lib/config-provider/locale](https://unpkg.com/zarm/lib/config-provider/locale/) 目录下寻找 |\r\n| theme           | string          | 'light'             | 主题模式，'light' 为光明主题，'dark' 为暗黑主题的切换                                                                               |\r\n| primaryColor    | string          | '#00bc70'           | 品牌标准色                                                                                                                          |\r\n| safeArea        | boolean         | true                | 是否适配安全区域屏                                                                                                                  |\r\n| mountContainer  | MountContainer  | () => document.body | 弹层组件渲染节点                                                                                                                    |\r\n| scrollContainer | ScrollContainer | () => window        | 组件滚动监听容器点                                                                                                                  |\r\n| cssVars         | Object          | {}                  | 组件 CSS 变量设置                                                                                                                   |\r\n\r\n### MountContainer\r\n\r\n```ts\r\ntype MountContainer = HTMLElement | (() => HTMLElement) | undefined | null | false;\r\n```\r\n\r\n### ScrollContainer\r\n\r\n```ts\r\ntype ScrollContainer = (HTMLElement | Window) | (() => HTMLElement | Window) | undefined | null;\r\n```\r\n"}}]);