"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[6057],{36057:function(r,e,n){n.r(e),e.default="# DatePicker 日期选择器\r\n\r\n## 基本用法\r\n\r\n```jsx\r\nimport { useRef, useReducer } from 'react';\r\nimport { List, Button, DatePicker, Toast } from 'zarm';\r\n\r\nconst currentYear = new Date().getFullYear();\r\nconst initialValue = {\r\n  basic: {\r\n    title: '选择日期',\r\n  },\r\n  range: {\r\n    title: '自定义范围',\r\n    props: {\r\n      min: new Date(new Date().setFullYear(currentYear - 3)),\r\n      max: new Date(new Date().setFullYear(currentYear + 3)),\r\n    },\r\n  },\r\n  filter: {\r\n    title: '自定义过滤规则',\r\n    props: {\r\n      filter: (type, { value }) => {\r\n        if (type === 'day') return value % 5 === 0;\r\n        return true;\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  const { type, key, value } = action;\r\n\r\n  const item = state[key];\r\n  const props = item?.props;\r\n\r\n  switch (type) {\r\n    case 'visible':\r\n      return {\r\n        ...state,\r\n        [key]: {\r\n          ...item,\r\n          props: {\r\n            ...props,\r\n            visible: !props?.visible,\r\n          },\r\n        },\r\n      };\r\n\r\n    case 'value':\r\n      return {\r\n        ...state,\r\n        [key]: {\r\n          ...item,\r\n          props: {\r\n            ...props,\r\n            value,\r\n          },\r\n        },\r\n      };\r\n\r\n    default:\r\n  }\r\n};\r\n\r\nconst Demo = () => {\r\n  const [state, dispatch] = useReducer(reducer, initialValue);\r\n\r\n  const setValue = (key, value) => {\r\n    dispatch({ type: 'value', key, value });\r\n  };\r\n\r\n  const toggle = (key) => {\r\n    dispatch({\r\n      type: 'visible',\r\n      key,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <List>\r\n      {Object.entries(state).map(([key, item], index) => (\r\n        <div key={key}>\r\n          <List.Item\r\n            title={item.title}\r\n            suffix={\r\n              <Button size=\"xs\" onClick={() => toggle(key)}>\r\n                选择\r\n              </Button>\r\n            }\r\n          />\r\n          <DatePicker\r\n            {...item.props}\r\n            onChange={(value, items) => console.log('DatePicker onChange', key, value, items)}\r\n            onConfirm={(value, items) => {\r\n              setValue(key, value);\r\n              toggle(key);\r\n              Toast.show(value.toLocaleString());\r\n              console.log('DatePicker onConfirm', key, value, items);\r\n            }}\r\n            onCancel={() => toggle(key)}\r\n          />\r\n        </div>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## 日期类型\r\n\r\n```jsx\r\nimport { useRef, useReducer } from 'react';\r\nimport { List, Button, DatePicker, Toast } from 'zarm';\r\n\r\nconst currentYear = new Date().getFullYear();\r\nconst initialValue = {\r\n  year: {\r\n    title: '年',\r\n    props: {\r\n      columnType: ['year'],\r\n    },\r\n  },\r\n  yearMonth: {\r\n    title: '年月',\r\n    props: {\r\n      columnType: ['year', 'month'],\r\n    },\r\n  },\r\n  month: {\r\n    title: '月',\r\n    props: {\r\n      columnType: ['month'],\r\n    },\r\n  },\r\n  week: {\r\n    title: '周',\r\n    props: {\r\n      columnType: ['year', 'week'],\r\n    },\r\n  },\r\n  date: {\r\n    title: '日期',\r\n  },\r\n  time: {\r\n    title: '时间',\r\n    props: {\r\n      columnType: ['hour', 'minute', 'second'],\r\n      value: new Date(new Date().setHours(0, 0, 0)),\r\n    },\r\n  },\r\n  datetime: {\r\n    title: '日期时间',\r\n    props: {\r\n      columnType: ['year', 'month', 'day', 'hour', 'minute'],\r\n    },\r\n  },\r\n  datetime: {\r\n    title: '12小时制',\r\n    props: {\r\n      columnType: ['meridiem', 'hour', 'minute'],\r\n    },\r\n  },\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  const { type, key, value } = action;\r\n\r\n  const item = state[key];\r\n  const props = item?.props;\r\n\r\n  switch (type) {\r\n    case 'visible':\r\n      return {\r\n        ...state,\r\n        [key]: {\r\n          ...item,\r\n          props: {\r\n            ...props,\r\n            visible: !props?.visible,\r\n          },\r\n        },\r\n      };\r\n\r\n    case 'value':\r\n      return {\r\n        ...state,\r\n        [key]: {\r\n          ...item,\r\n          props: {\r\n            ...props,\r\n            value,\r\n          },\r\n        },\r\n      };\r\n\r\n    default:\r\n  }\r\n};\r\n\r\nconst Demo = () => {\r\n  const [state, dispatch] = useReducer(reducer, initialValue);\r\n\r\n  const setValue = (key, value) => {\r\n    dispatch({ type: 'value', key, value });\r\n  };\r\n\r\n  const toggle = (key) => {\r\n    dispatch({\r\n      type: 'visible',\r\n      key,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <List>\r\n      {Object.entries(state).map(([key, item], index) => (\r\n        <div key={key}>\r\n          <List.Item\r\n            title={item.title}\r\n            suffix={\r\n              <Button size=\"xs\" onClick={() => toggle(key)}>\r\n                选择\r\n              </Button>\r\n            }\r\n          />\r\n          <DatePicker\r\n            {...item.props}\r\n            onChange={(value, items) => console.log('DatePicker onChange', key, value, items)}\r\n            onConfirm={(value, items) => {\r\n              setValue(key, value);\r\n              toggle(key);\r\n              Toast.show(value.toLocaleString());\r\n              console.log('DatePicker onConfirm', key, value, items);\r\n            }}\r\n            onCancel={() => toggle(key)}\r\n          />\r\n        </div>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## DateSelect 表单日期选择器\r\n\r\n```jsx\r\nimport { useState } from 'react';\r\nimport { Toast, List, DateSelect, Button } from 'zarm';\r\n\r\nconst Demo = () => {\r\n  const [value, setValue] = useState(new Date());\r\n  return (\r\n    <List>\r\n      <List.Item\r\n        title=\"日期选择\"\r\n        suffix={\r\n          <Button\r\n            size=\"xs\"\r\n            onClick={() => {\r\n              setValue(undefined);\r\n            }}\r\n          >\r\n            清除\r\n          </Button>\r\n        }\r\n      >\r\n        <DateSelect\r\n          value={value}\r\n          onChange={(value, items) => {\r\n            console.log('DateSelect onChange', value, items);\r\n          }}\r\n          onConfirm={(value, items) => {\r\n            setValue(value);\r\n            Toast.show(value.toLocaleString());\r\n            console.log('DateSelect onConfirm', value, items);\r\n          }}\r\n          filter={(type, { value }) => {\r\n            if (type === 'day') return value % 5 === 0;\r\n            return true;\r\n          }}\r\n        />\r\n      </List.Item>\r\n    </List>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## 指令式调用\r\n\r\n```jsx\r\nimport { useState } from 'react';\r\nimport { DatePicker, List, Button, Toast } from 'zarm';\r\n\r\nconst Demo = () => {\r\n  const [value, setValue] = useState();\r\n\r\n  return (\r\n    <>\r\n      <List>\r\n        <List.Item\r\n          title=\"选择日期\"\r\n          suffix={\r\n            <Button\r\n              size=\"xs\"\r\n              onClick={async () => {\r\n                const { value: changedValue } = await DatePicker.prompt({\r\n                  value,\r\n                  defaultValue: new Date('2023/2/23'),\r\n                });\r\n                if (!changedValue) return;\r\n                setValue(changedValue);\r\n                console.log(changedValue);\r\n                Toast.show(changedValue.toLocaleString());\r\n              }}\r\n            >\r\n              选择\r\n            </Button>\r\n          }\r\n        ></List.Item>\r\n      </List>\r\n    </>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## DatePickerView 平铺选择器\r\n\r\n```jsx\r\nimport { useState } from 'react';\r\nimport { DatePickerView, List } from 'zarm';\r\n\r\nconst Demo = () => {\r\n  return (\r\n    <DatePickerView\r\n      onChange={(value, items) => {\r\n        console.log('DatePickerView', value, items);\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## API\r\n\r\n| 属性         | 类型                                                                                                                                                | 默认值                   | 说明                   |\r\n| :----------- | :-------------------------------------------------------------------------------------------------------------------------------------------------- | :----------------------- | :--------------------- |\r\n| value        | Date                                                                                                                                                | -                        | 值                     |\r\n| defaultValue | Date                                                                                                                                                | -                        | 初始值                 |\r\n| columnType   | ('year' \\| 'month' \\| 'day' \\| 'meridiem' \\| 'hour' \\| 'minute' \\| 'second' \\| 'week' \\| 'week-day')[]                                              | ['year', 'month', 'day'] | 指定列选择类型         |\r\n| min          | Date                                                                                                                                                | -                        | 相应 mode 的最小时间   |\r\n| max          | Date                                                                                                                                                | -                        | 相应 mode 的最大时间   |\r\n| disabled     | boolean                                                                                                                                             | false                    | 是否禁用               |\r\n| filter       | (type: 'year' \\| 'month' \\| 'day' \\| 'meridiem' \\| 'hour' \\| 'minute' \\| 'second' \\| 'week' \\| 'week-day', {value: number, date: Date} ) => boolean | -                        | 选项过滤函数           |\r\n| renderLabel  | (type: 'year' \\| 'month' \\| 'day' \\| 'meridiem' \\| 'hour' \\| 'minute' \\| 'second' \\| 'week' \\| 'week-day', value: number) => React.ReactNode        | -                        | 单个选项的展示         |\r\n| onChange     | (value: Date) => void                                                                                                                               | -                        | 值变化时触发的回调函数 |\r\n\r\n### 指令式调用\r\n\r\nDatePicker 支持指令式调用，提供了 `prompt` 方法\r\n\r\n```tsx\r\nprompt: (props: Omit<DatePickerProps, 'visible' | 'visible' | 'children'>) =>\r\n  Promise<DatePickerValue[] | null>;\r\n```\r\n\r\n`prompt` 方法的返回值是一个 Promise，如果用户点击了确定，从 Promise 中可以解析到 `DatePickerValue[]`，而如果用户是触发的取消操作，那么 Promise 中的值是 `null`。你可以通过 `await` 或 `.then()` 来获取到其中的值：\r\n\r\n```tsx\r\nconst value = await DatePicker.prompt();\r\n\r\nDatePicker.prompt().then((value) => {\r\n  // ...\r\n});\r\n```\r\n\r\n### 仅 DatePicker & DateSelect 支持的属性\r\n\r\n| 属性              | 类型                            | 默认值              | 说明                                           |\r\n| :---------------- | :------------------------------ | :------------------ | :--------------------------------------------- |\r\n| visible           | boolean                         | false               | 是否展示                                       |\r\n| title             | string                          | '请选择'            | 选择器标题                                     |\r\n| cancelText        | string                          | '取消'              | 取消栏文字                                     |\r\n| confirmText       | string                          | '确定'              | 确定栏文字                                     |\r\n| maskClosable      | boolean                         | true                | 是否点击遮罩层时关闭，需要和 onCancel 一起使用 |\r\n| wheelDefaultValue | string \\| Date                  | -                   | 滚轮默认停留的日期位置                         |\r\n| onConfirm         | (value: Date \\| string) => void | -                   | 点击确定时触发的回调函数                       |\r\n| onCancel          | () => void                      | -                   | 点击取消时触发的回调函数                       |\r\n| mountContainer    | MountContainer                  | () => document.body | 指定 DatePicker 挂载的 HTML 节点               |\r\n\r\n### 仅 DateSelect 支持的属性\r\n\r\n| 属性        | 类型   | 默认值   | 说明         |\r\n| :---------- | :----- | :------- | :----------- |\r\n| placeholder | string | '请选择' | 输入提示信息 |\r\n\r\n### ColumnType\r\n\r\nyear | month | day | meridiem | hour | minute | second | week | week-day\r\n\r\n## CSS 变量\r\n\r\n### DatePickerView\r\n\r\n| 属性                                | 默认值                          | 说明                 |\r\n| :---------------------------------- | :------------------------------ | :------------------- |\r\n| --background                        | '#fff'                          | 内容区域背景         |\r\n| --padding                           | '16px'                          | 内容区域内边距       |\r\n| --mask-start-background             | 'rgba(255, 255, 255, 0.4)'      | 内容区域头部蒙层背景 |\r\n| --mask-end-background               | 'rgba(255, 255, 255, 0.8)'      | 内容区域底部蒙层背景 |\r\n| --wheel-item-rows                   | 5                               | 滚轮元素长度         |\r\n| --wheel-item-height                 | '34px'                          | 滚轮元素高度         |\r\n| --wheel-item-font-size              | '20px'                          | 滚轮元素文字大小     |\r\n| --wheel-item-text-color             | 'var(--za-color-text)'          | 滚轮元素文字颜色     |\r\n| --wheel-item-disabled-text-color    | 'var(--za-color-text-disabled)' | 滚轮元素文字禁用颜色 |\r\n| --wheel-item-selected-background    | 'rgba(116, 116, 128, 0.08)'     | 滚轮元素文字选中背景 |\r\n| --wheel-item-selected-border-radius | '7px'                           | 滚轮元素文字选中圆角 |\r\n\r\n### DatePicker\r\n\r\n| 属性                                | 默认值                          | 说明                 |\r\n| :---------------------------------- | :------------------------------ | :------------------- |\r\n| --header-height                     | '45px'                          | 头部高度             |\r\n| --header-font-size                  | '16px'                          | 头部文字大小         |\r\n| --header-background                 | '#f7f7f7'                       | 头部背景             |\r\n| --header-title-text-color           | 'var(--za-color-text)'          | 头部标题文字颜色     |\r\n| --header-submit-text-color          | 'var(--za-theme-primary)'       | 头部提交按钮文字颜色 |\r\n| --header-cancel-text-color          | 'var(--za-color-text-caption)'  | 头部取消按钮文字颜色 |\r\n| --content-background                | '#fff'                          | 内容区域背景         |\r\n| --content-padding                   | '16px'                          | 内容区域内边距       |\r\n| --content-mask-start-background     | 'rgba(255, 255, 255, 0.4)'      | 内容区域头部蒙层背景 |\r\n| --content-mask-end-background       | 'rgba(255, 255, 255, 0.8)'      | 内容区域底部蒙层背景 |\r\n| --wheel-item-rows                   | 5                               | 滚轮元素长度         |\r\n| --wheel-item-height                 | '34px'                          | 滚轮元素高度         |\r\n| --wheel-item-font-size              | '20px'                          | 滚轮元素文字大小     |\r\n| --wheel-item-text-color             | 'var(--za-color-text)'          | 滚轮元素文字颜色     |\r\n| --wheel-item-disabled-text-color    | 'var(--za-color-text-disabled)' | 滚轮元素文字禁用颜色 |\r\n| --wheel-item-selected-background    | 'rgba(116, 116, 128, 0.08)'     | 滚轮元素文字选中背景 |\r\n| --wheel-item-selected-border-radius | '7px'                           | 滚轮元素文字选中圆角 |\r\n\r\n### DateSelect\r\n\r\n| 属性                | 默认值                             | 说明               |\r\n| :------------------ | :--------------------------------- | :----------------- |\r\n| --header-height     | '45px'                             | 头部高度           |\r\n| --height            | '28px'                             | 输入框高度         |\r\n| --disabled-color    | 'var(--za-color-text-disabled)'    | 输入框禁用文字颜色 |\r\n| --placeholder-color | 'var(--za-color-text-placeholder)' | 输入框占位文字颜色 |\r\n| --arrow-color       | 'var(--za-arrow-color)'            | 输入框箭头         |\r\n| --arrow-size        | 'var(--za-arrow-size)'             | 输入框箭头尺寸     |\r\n| --arrow-width       | 'var(--za-arrow-width)'            | 输入框箭头宽度     |\r\n"}}]);