"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[3591],{63591:function(r,n,e){e.r(n),n.default="# Keyboard 虚拟键盘\r\n\r\n## Keyboard 平铺键盘\r\n\r\n```jsx\r\nimport { useState } from 'react';\r\nimport { List, Keyboard, Radio, Slider, Switch, Button } from 'zarm';\r\n\r\nconst DEFAULT_STYLE = {\r\n  height: 52,\r\n  fontSize: 30,\r\n  gap: 6,\r\n  borderRadius: 5,\r\n  boxShadow: true,\r\n};\r\n\r\n// 自定义车牌键盘\r\nconst CAR_PLATE = {\r\n  columns: 7,\r\n  keys: [\r\n    '沪',\r\n    '苏',\r\n    {\r\n      text: '黑',\r\n      disabled: true,\r\n    },\r\n    {\r\n      text: '辽',\r\n      disabled: true,\r\n    },\r\n    '浙',\r\n    '赣',\r\n    '湘',\r\n    '晋',\r\n    '豫',\r\n    '云',\r\n    '冀',\r\n    '皖',\r\n    '鲁',\r\n    '新',\r\n    '鄂',\r\n    '桂',\r\n    '甘',\r\n    '蒙',\r\n    '陕',\r\n    {\r\n      text: '吉',\r\n      disabled: true,\r\n    },\r\n    '闽',\r\n    '贵',\r\n    '粤',\r\n    '川',\r\n    '青',\r\n    '藏',\r\n    {\r\n      text: 'ok',\r\n      rowSpan: 2,\r\n      colSpan: 2,\r\n    },\r\n    '琼',\r\n    '宁',\r\n    '渝',\r\n    '京',\r\n    '津',\r\n  ],\r\n};\r\n\r\nconst Demo = () => {\r\n  const [type, setType] = useState('number');\r\n  const [dataSource, setDataSource] = useState(null);\r\n  const [style, setStyle] = useState(DEFAULT_STYLE);\r\n\r\n  const onSetType = (type) => {\r\n    setType(type);\r\n\r\n    if (type === 'custom') {\r\n      setDataSource(CAR_PLATE);\r\n      setStyle({ ...DEFAULT_STYLE, fontSize: 20, height: 40 });\r\n    } else {\r\n      setDataSource(null);\r\n      setStyle(DEFAULT_STYLE);\r\n    }\r\n  };\r\n\r\n  const keyStyle = {\r\n    '--item-height': `${style.height}px`,\r\n    '--item-font-size': `${style.fontSize}px`,\r\n    '--item-gap': `${style.gap}px`,\r\n    '--item-border-radius': `${style.borderRadius}px`,\r\n    '--item-box-shadow': !style.boxShadow ? 'none' : undefined,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <List>\r\n        <List.Item\r\n          title=\"键盘类型\"\r\n          suffix={\r\n            <Radio.Group compact type=\"button\" value={type} onChange={onSetType}>\r\n              <Radio value=\"number\">数字</Radio>\r\n              <Radio value=\"price\">金额</Radio>\r\n              <Radio value=\"idcard\">身份证</Radio>\r\n              <Radio value=\"custom\">自定义</Radio>\r\n            </Radio.Group>\r\n          }\r\n        />\r\n        <List.Item title=\"按键高度\">\r\n          <Slider\r\n            value={style.height}\r\n            onChange={(value) => setStyle({ ...style, height: value })}\r\n          />{' '}\r\n          {style.height}px\r\n        </List.Item>\r\n        <List.Item title=\"按键字号\">\r\n          <Slider\r\n            max={50}\r\n            value={style.fontSize}\r\n            onChange={(value) => setStyle({ ...style, fontSize: value })}\r\n          />\r\n          {style.fontSize}px\r\n        </List.Item>\r\n        <List.Item title=\"按键间距\">\r\n          <Slider\r\n            max={15}\r\n            value={style.gap}\r\n            onChange={(value) => setStyle({ ...style, gap: value })}\r\n          />\r\n          {style.gap}px\r\n        </List.Item>\r\n        <List.Item title=\"按键圆角\">\r\n          <Slider\r\n            value={style.borderRadius}\r\n            onChange={(value) => setStyle({ ...style, borderRadius: value })}\r\n          />\r\n          {style.borderRadius}px\r\n        </List.Item>\r\n        <List.Item title=\"按键阴影\">\r\n          <Switch\r\n            checked={style.boxShadow}\r\n            onChange={(checked) => setStyle({ ...style, boxShadow: checked })}\r\n          />\r\n        </List.Item>\r\n        <List.Item\r\n          suffix={\r\n            <Button size=\"xs\" onClick={() => onSetType(type)}>\r\n              还原设置\r\n            </Button>\r\n          }\r\n        />\r\n      </List>\r\n\r\n      <Keyboard\r\n        type={type}\r\n        dataSource={dataSource}\r\n        style={keyStyle}\r\n        onKeyClick={(key) => console.log(key)}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## KeyboardPicker 键盘触发器\r\n\r\n```jsx\r\nimport { useState } from 'react';\r\nimport { List, Button, KeyboardPicker } from 'zarm';\r\n\r\nconst Demo = () => {\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const toggle = () => {\r\n    setVisible(!visible);\r\n  };\r\n\r\n  const onKeyClick = (key) => {\r\n    console.log(key);\r\n    if (['close', 'ok'].indexOf(key) > -1) {\r\n      toggle();\r\n      return;\r\n    }\r\n    // do something...\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <List>\r\n        <List.Item\r\n          title=\"拾取器触发方式\"\r\n          suffix={\r\n            <Button size=\"xs\" onClick={toggle}>\r\n              {visible ? '关闭' : '开启'}\r\n            </Button>\r\n          }\r\n        />\r\n      </List>\r\n\r\n      <KeyboardPicker visible={visible} onKeyClick={onKeyClick} />\r\n    </>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Demo />, mountNode);\r\n```\r\n\r\n## API\r\n\r\n| 属性       | 类型                                | 默认值   | 说明                                                                                                            |\r\n| :--------- | :---------------------------------- | :------- | :-------------------------------------------------------------------------------------------------------------- |\r\n| type       | string                              | 'number' | 键盘类型，可选值 `number`、`price`、`idcard`                                                                    |\r\n| onKeyClick | (key: KeyBoardKey['value']) => void | -        | 点击按键时触发的回调函数                                                                                        |\r\n| dataSource | KeyBoardDataSource                  | -        | 自定义键盘，格式参考 [zarm/lib/keyboard/BuildInConfig.js](https://unpkg.com/zarm/lib/keyboard/BuildInConfig.js) |\r\n\r\n### KeyBoardDataSource\r\n\r\n| 属性    | 类型                                   | 默认值 | 说明       |\r\n| :------ | :------------------------------------- | :----- | :--------- |\r\n| columns | number                                 | -      | 每行的列数 |\r\n| keys    | KeyBoardKey['text'][] \\| KeyBoardKey[] | []     | 按键配置   |\r\n\r\n### KeyBoardKey\r\n\r\n| 属性     | 类型            | 默认值 | 说明                               |\r\n| :------- | :-------------- | :----- | :--------------------------------- |\r\n| value    | string          | -      | 按键值，未设置时取 `text` 属性的值 |\r\n| text     | React.ReactNode | -      | 按键内容                           |\r\n| rowSpan  | number          | -      | 可横跨的行数                       |\r\n| colSpan  | number          | -      | 可横跨的列数                       |\r\n| disabled | boolean         | false  | 是否禁用                           |\r\n\r\n### 仅 KeyboardPicker 支持的属性\r\n\r\n| 属性     | 类型    | 默认值 | 说明                   |\r\n| :------- | :------ | :----- | :--------------------- |\r\n| visible  | boolean | false  | 是否展示               |\r\n| destroy  | boolean | true   | 弹层关闭后是否移除节点 |\r\n| safeArea | boolean | false  | 是否适配安全区域       |\r\n\r\n## CSS 变量\r\n\r\n| 属性                     | 默认值                       | 说明                 |\r\n| :----------------------- | :--------------------------- | :------------------- |\r\n| --background             | '#d8d8d8'                    | 面板背景色           |\r\n| --item-background        | '#fff'                       | 按键背景色           |\r\n| --item-active-background | 'rgba(162, 165, 176, 0.8)'   | 按键激活状态背景色   |\r\n| --item-gap               | '6px'                        | 按键间距             |\r\n| --item-height            | '52px'                       | 按键高度             |\r\n| --item-font-size         | '30px'                       | 按键字体大小         |\r\n| --item-border-radius     | '5px'                        | 按键圆角             |\r\n| --item-box-shadow        | '0 1px 0 #898a8d'            | 按键阴影             |\r\n| --ok-background          | 'var(--za-theme-primary)'    | 确定按键背景色       |\r\n| --ok-font-size           | '20px'                       | 确定按键字体大小     |\r\n| --ok-text-color          | '#fff'                       | 确定按键字体颜色     |\r\n| --opacity-disabled       | 'var(--za-opacity-disabled)' | 按键禁用状态不透明度 |\r\n"}}]);