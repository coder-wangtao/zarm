{"version":3,"file":"js/9005.ebcc8ce2.js","mappings":"0GAAA,88P","sources":["webpack://site/../zarm/src/water-mark/demo.md"],"sourcesContent":["export default \"# WaterMark 水印\\r\\n\\r\\n## 基本用法\\r\\n\\r\\n```jsx\\r\\nimport { useRef, useState } from 'react';\\r\\nimport { List, Input, Radio, Switch, Slider, WaterMark } from 'zarm';\\r\\n\\r\\nconst UNILINE_TEXT = '众安科技';\\r\\nconst MULTI_LINE_TEXT = [UNILINE_TEXT, 'ZhongAnTech'];\\r\\n\\r\\nconst WATERMARK_IMAGE_URL = 'https://zarm.design/images/logo.1a6cfc30.svg';\\r\\n\\r\\nconst DEFAULT_PROPS = {\\r\\n  text: UNILINE_TEXT,\\r\\n  mode: 'interval',\\r\\n  monitor: true,\\r\\n  markStyle: {\\r\\n    opacity: 0.15,\\r\\n  },\\r\\n  textStyle: {\\r\\n    textAlign: 'left',\\r\\n  },\\r\\n  imageStyle: {\\r\\n    width: 37.5,\\r\\n    height: 37.5,\\r\\n  },\\r\\n};\\r\\n\\r\\nconst Demo = () => {\\r\\n  const [props, updateProps] = useState(DEFAULT_PROPS);\\r\\n  const [contain, setContain] = useState(false);\\r\\n\\r\\n  const setProps = (data = {}) => {\\r\\n    updateProps({\\r\\n      ...props,\\r\\n      ...data,\\r\\n    });\\r\\n  };\\r\\n\\r\\n  const isMultiline = Array.isArray(props.text);\\r\\n\\r\\n  const content = (\\r\\n    <List>\\r\\n      <List.Item\\r\\n        suffix={\\r\\n          <Radio.Group\\r\\n            value={!!props.image}\\r\\n            compact\\r\\n            type=\\\"button\\\"\\r\\n            onChange={(value) => setProps({ image: value ? WATERMARK_IMAGE_URL : null })}\\r\\n          >\\r\\n            <Radio value={false}>文字</Radio>\\r\\n            <Radio value={true}>图片</Radio>\\r\\n          </Radio.Group>\\r\\n        }\\r\\n      >\\r\\n        水印类型\\r\\n      </List.Item>\\r\\n      {props.image ? (\\r\\n        <>\\r\\n          <List.Item title=\\\"图片地址\\\">\\r\\n            <Input\\r\\n              rows={2}\\r\\n              type=\\\"text\\\"\\r\\n              value={props.image}\\r\\n              placeholder=\\\"请输入图片地址\\\"\\r\\n              onChange={(event) => setProps({ image: event.target.value })}\\r\\n            />\\r\\n          </List.Item>\\r\\n          <List.Item title=\\\"图片宽度\\\">\\r\\n            <Input\\r\\n              type=\\\"number\\\"\\r\\n              value={props.imageStyle.width}\\r\\n              onChange={(event) =>\\r\\n                setProps({\\r\\n                  imageStyle: {\\r\\n                    ...props.imageStyle,\\r\\n                    width: event.target.value,\\r\\n                  },\\r\\n                })\\r\\n              }\\r\\n            />\\r\\n          </List.Item>\\r\\n          <List.Item title=\\\"图片高度\\\">\\r\\n            <Input\\r\\n              type=\\\"number\\\"\\r\\n              value={props.imageStyle.height}\\r\\n              onChange={(event) =>\\r\\n                setProps({\\r\\n                  imageStyle: {\\r\\n                    ...props.imageStyle,\\r\\n                    height: event.target.value,\\r\\n                  },\\r\\n                })\\r\\n              }\\r\\n            />\\r\\n          </List.Item>\\r\\n        </>\\r\\n      ) : (\\r\\n        <>\\r\\n          <List.Item\\r\\n            suffix={\\r\\n              <Radio.Group\\r\\n                value={isMultiline}\\r\\n                compact\\r\\n                type=\\\"button\\\"\\r\\n                onChange={(value) => setProps({ text: value ? MULTI_LINE_TEXT : UNILINE_TEXT })}\\r\\n              >\\r\\n                <Radio value={false}>单行</Radio>\\r\\n                <Radio value={true}>多行</Radio>\\r\\n              </Radio.Group>\\r\\n            }\\r\\n          >\\r\\n            文字水印\\r\\n          </List.Item>\\r\\n          <List.Item title=\\\"水印文案\\\">\\r\\n            <Input\\r\\n              rows={isMultiline ? 3 : 1}\\r\\n              type=\\\"text\\\"\\r\\n              value={isMultiline ? props.text.join('\\\\n') : props.text}\\r\\n              placeholder=\\\"请输入水印文案\\\"\\r\\n              onChange={(event) =>\\r\\n                setProps({\\r\\n                  text: isMultiline ? event.target.value.split('\\\\n') : event.target.value,\\r\\n                })\\r\\n              }\\r\\n            />\\r\\n          </List.Item>\\r\\n          <List.Item\\r\\n            suffix={\\r\\n              <Radio.Group\\r\\n                value={props.textStyle.textAlign}\\r\\n                compact\\r\\n                type=\\\"button\\\"\\r\\n                onChange={(value) => setProps({ textStyle: { textAlign: value } })}\\r\\n              >\\r\\n                <Radio value=\\\"left\\\">居左</Radio>\\r\\n                <Radio value=\\\"center\\\">居中</Radio>\\r\\n                <Radio value=\\\"right\\\">居右</Radio>\\r\\n              </Radio.Group>\\r\\n            }\\r\\n          >\\r\\n            对齐方式\\r\\n          </List.Item>\\r\\n        </>\\r\\n      )}\\r\\n      <List.Item\\r\\n        suffix={\\r\\n          <Radio.Group\\r\\n            value={props.mode}\\r\\n            compact\\r\\n            type=\\\"button\\\"\\r\\n            onChange={(value) => setProps({ mode: value })}\\r\\n          >\\r\\n            <Radio value=\\\"repeat\\\">重复展示</Radio>\\r\\n            <Radio value=\\\"interval\\\">错行展示</Radio>\\r\\n          </Radio.Group>\\r\\n        }\\r\\n      >\\r\\n        渲染模式\\r\\n      </List.Item>\\r\\n      <List.Item title=\\\"透明度\\\">\\r\\n        <Slider\\r\\n          value={props.markStyle.opacity * 100}\\r\\n          onChange={(value) => setProps({ markStyle: { opacity: value / 100 } })}\\r\\n        />\\r\\n      </List.Item>\\r\\n      <List.Item\\r\\n        title=\\\"保护模式\\\"\\r\\n        suffix={\\r\\n          <Switch checked={props.monitor} onChange={(value) => setProps({ monitor: value })} />\\r\\n        }\\r\\n        description=\\\"监听水印变化，防止被篡改\\\"\\r\\n      />\\r\\n      <List.Item\\r\\n        title=\\\"包裹容器\\\"\\r\\n        suffix={<Switch checked={contain} onChange={(value) => setContain(value)} />}\\r\\n      />\\r\\n    </List>\\r\\n  );\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      {!contain && content}\\r\\n      <WaterMark {...props}>{contain && content}</WaterMark>\\r\\n    </>\\r\\n  );\\r\\n};\\r\\n\\r\\nReactDOM.render(<Demo />, mountNode);\\r\\n```\\r\\n\\r\\n## API\\r\\n\\r\\n| 属性       | 类型               | 默认值     | 说明                                                 |\\r\\n| :--------- | :----------------- | :--------- | :--------------------------------------------------- |\\r\\n| mode       | repeat \\\\| interval | 'interval' | 展示模式，interval 表示错行展示                      |\\r\\n| text       | string \\\\| string[] | -          | 水印文本, 为数组时表示多行水印                       |\\r\\n| image      | string             | -          | 图片源，建议导出 2 倍或 3 倍图，优先使用图片渲染水印 |\\r\\n| textStyle  | TextStyle          | -          | 文本样式                                             |\\r\\n| markStyle  | MarkStyle          | -          | 水印样式                                             |\\r\\n| imageStyle | ImageStyle         | -          | 图片样式                                             |\\r\\n| monitor    | boolean            | true       | 是否开启监视模式                                     |\\r\\n\\r\\n## MarkStyle\\r\\n\\r\\n| 属性       | 类型   | 默认值 | 说明                                 |\\r\\n| :--------- | :----- | :----- | :----------------------------------- |\\r\\n| width      | number | 120    | 单个水印宽度                         |\\r\\n| height     | number | 64     | 单个水印高度                         |\\r\\n| opacity    | number | 0.15   | 水印不透明度                         |\\r\\n| rotate     | number | -22    | 旋转的角度                           |\\r\\n| zIndex     | number | 2000   | 样式层级                             |\\r\\n| gapX       | number | 24     | 水印之间的水平间距                   |\\r\\n| gapY       | number | 48     | 水印之间的垂直间距                   |\\r\\n| offsetLeft | number | 0      | 水印在 canvas 画布上绘制的水平偏移量 |\\r\\n| offsetTop  | number | 0      | 水印在 canvas 画布上绘制的垂直偏移量 |\\r\\n\\r\\n## TextStyle\\r\\n\\r\\n| 属性         | 类型             | 默认值       | 说明               |\\r\\n| :----------- | :--------------- | :----------- | :----------------- |\\r\\n| color        | string           | '#000'       | 设置字体颜色       |\\r\\n| fontSize     | number           | 14           | 设置字体大小       |\\r\\n| fontWeight   | string \\\\| number | 300          | 设置字体粗细       |\\r\\n| fontStyle    | string           | 'normal'     | 规定字体样式       |\\r\\n| fontFamily   | string           | 'sans-serif' | 设置水印文字的字体 |\\r\\n| fontVariant  | string           | 'normal'     | 规定字体变体       |\\r\\n| textAlign    | string           | 'left'       | 水印文字的对齐方式 |\\r\\n| textBaseline | string           | 'alphabetic' | 绘制文本的文本基线 |\\r\\n\\r\\n## ImageStyle\\r\\n\\r\\n| 属性   | 类型   | 默认值 | 说明     |\\r\\n| :----- | :----- | :----- | :------- |\\r\\n| width  | number | 120    | 图片宽度 |\\r\\n| height | number | 64     | 图片高度 |\\r\\n\";"],"names":[],"sourceRoot":""}