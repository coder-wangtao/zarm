{"version":3,"file":"js/8193.632b2e01.js","mappings":"0GAAA,innB","sources":["webpack://site/../zarm/src/modal/demo.md"],"sourcesContent":["export default \"# Modal 模态框\\r\\n\\r\\n## 基本用法\\r\\n\\r\\n```jsx\\r\\nimport { useRef, useReducer } from 'react';\\r\\nimport { Modal, List, Button, Select } from 'zarm';\\r\\n\\r\\nconst initState = {\\r\\n  normal: {\\r\\n    visible: false,\\r\\n  },\\r\\n  hasFooter: {\\r\\n    visible: false,\\r\\n  },\\r\\n  closable: {\\r\\n    visible: false,\\r\\n  },\\r\\n  onlyBody: {\\r\\n    visible: false,\\r\\n  },\\r\\n  animation: {\\r\\n    visible: false,\\r\\n    animationType: 'fade',\\r\\n  },\\r\\n  customContainer: {\\r\\n    visible: false,\\r\\n  },\\r\\n  overlength: {\\r\\n    visible: false,\\r\\n  },\\r\\n};\\r\\n\\r\\nconst reducer = (state, action) => {\\r\\n  const { type, key, animationType } = action;\\r\\n\\r\\n  switch (type) {\\r\\n    case 'visible':\\r\\n      return {\\r\\n        ...state,\\r\\n        [key]: {\\r\\n          ...state[key],\\r\\n          visible: !state[key].visible,\\r\\n        },\\r\\n      };\\r\\n\\r\\n    case 'animation':\\r\\n      return {\\r\\n        ...state,\\r\\n        [key]: {\\r\\n          ...state[key],\\r\\n          animationType,\\r\\n        },\\r\\n      };\\r\\n\\r\\n    default:\\r\\n  }\\r\\n};\\r\\n\\r\\nconst Demo = () => {\\r\\n  const myRef = useRef();\\r\\n  const [state, dispatch] = useReducer(reducer, initState);\\r\\n\\r\\n  const toggle = (key) => dispatch({ type: 'visible', key });\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <List>\\r\\n        <List.Item\\r\\n          title=\\\"普通\\\"\\r\\n          suffix={\\r\\n            <Button size=\\\"xs\\\" onClick={() => toggle('normal')}>\\r\\n              开启\\r\\n            </Button>\\r\\n          }\\r\\n        />\\r\\n        <List.Item\\r\\n          title=\\\"自定义底部\\\"\\r\\n          suffix={\\r\\n            <Button size=\\\"xs\\\" onClick={() => toggle('hasFooter')}>\\r\\n              开启\\r\\n            </Button>\\r\\n          }\\r\\n        />\\r\\n        <List.Item\\r\\n          title=\\\"遮罩层可关闭\\\"\\r\\n          suffix={\\r\\n            <Button size=\\\"xs\\\" onClick={() => toggle('closable')}>\\r\\n              开启\\r\\n            </Button>\\r\\n          }\\r\\n        />\\r\\n        <List.Item\\r\\n          title=\\\"无头部，无底部\\\"\\r\\n          suffix={\\r\\n            <Button size=\\\"xs\\\" onClick={() => toggle('onlyBody')}>\\r\\n              开启\\r\\n            </Button>\\r\\n          }\\r\\n        />\\r\\n        <List.Item\\r\\n          title=\\\"动画效果\\\"\\r\\n          suffix={\\r\\n            <Button size=\\\"xs\\\" onClick={() => toggle('animation')}>\\r\\n              开启\\r\\n            </Button>\\r\\n          }\\r\\n        >\\r\\n          <Select\\r\\n            value={state.animation.animationType}\\r\\n            dataSource={[\\r\\n              { value: 'fade', label: '淡出淡入效果' },\\r\\n              { value: 'zoom', label: '缩放效果' },\\r\\n              { value: 'rotate', label: '旋转效果' },\\r\\n              { value: 'door', label: '开关门效果' },\\r\\n              { value: 'flip', label: '翻转效果' },\\r\\n              { value: 'move-up', label: '向上移入效果' },\\r\\n              { value: 'move-down', label: '向下移入效果' },\\r\\n              { value: 'move-left', label: '向左移入效果' },\\r\\n              { value: 'move-right', label: '向右移入效果' },\\r\\n              { value: 'slide-up', label: '向上滑入效果' },\\r\\n              { value: 'slide-down', label: '向下滑入效果' },\\r\\n              { value: 'slide-left', label: '向左滑入效果' },\\r\\n              { value: 'slide-right', label: '向右滑入效果' },\\r\\n            ]}\\r\\n            itemRender={(data) => data && `${data.label}（${data.value}）`}\\r\\n            displayRender={(selected) => selected.map((item) => item && item.label)}\\r\\n            onConfirm={(selected) => {\\r\\n              dispatch({\\r\\n                type: 'animation',\\r\\n                key: 'animation',\\r\\n                animationType: selected[0],\\r\\n              });\\r\\n            }}\\r\\n          />\\r\\n        </List.Item>\\r\\n        <List.Item\\r\\n          suffix={\\r\\n            <Button size=\\\"xs\\\" onClick={() => toggle('customContainer')}>\\r\\n              开启\\r\\n            </Button>\\r\\n          }\\r\\n        >\\r\\n          挂载到指定 DOM 节点\\r\\n        </List.Item>\\r\\n        <List.Item\\r\\n          suffix={\\r\\n            <Button size=\\\"xs\\\" onClick={() => toggle('overlength')}>\\r\\n              开启\\r\\n            </Button>\\r\\n          }\\r\\n        >\\r\\n          超长内容\\r\\n        </List.Item>\\r\\n      </List>\\r\\n\\r\\n      <div id=\\\"test-div\\\" style={{ position: 'relative', zIndex: 1 }} ref={myRef} />\\r\\n\\r\\n      <Modal visible={state.normal.visible} title=\\\"标题\\\" closable onClose={() => toggle('normal')}>\\r\\n        模态框内容\\r\\n      </Modal>\\r\\n\\r\\n      <Modal\\r\\n        title=\\\"标题\\\"\\r\\n        visible={state.hasFooter.visible}\\r\\n        footer={\\r\\n          <Button block shape=\\\"rect\\\" theme=\\\"primary\\\" onClick={() => toggle('hasFooter')}>\\r\\n            确定\\r\\n          </Button>\\r\\n        }\\r\\n      >\\r\\n        模态框内容\\r\\n      </Modal>\\r\\n\\r\\n      <Modal\\r\\n        visible={state.closable.visible}\\r\\n        title=\\\"标题\\\"\\r\\n        maskClosable\\r\\n        onClose={() => toggle('closable')}\\r\\n      >\\r\\n        点击遮罩层关闭\\r\\n      </Modal>\\r\\n\\r\\n      <Modal visible={state.onlyBody.visible} maskClosable onClose={() => toggle('onlyBody')}>\\r\\n        无头部，无底部\\r\\n      </Modal>\\r\\n\\r\\n      <Modal\\r\\n        visible={state.animation.visible}\\r\\n        animationType={state.animation.animationType}\\r\\n        maskClosable\\r\\n        onClose={() => toggle('animation')}\\r\\n      >\\r\\n        <div style={{ height: 100 }}>\\r\\n          当前使用的动画类型animationType：'{state.animation.animationType}'\\r\\n        </div>\\r\\n      </Modal>\\r\\n\\r\\n      <Modal\\r\\n        visible={state.customContainer.visible}\\r\\n        maskClosable\\r\\n        onClose={() => toggle('customContainer')}\\r\\n        mountContainer={() => myRef.current}\\r\\n      >\\r\\n        挂载到指定dom节点\\r\\n      </Modal>\\r\\n\\r\\n      <Modal\\r\\n        visible={state.overlength.visible}\\r\\n        title=\\\"标题\\\"\\r\\n        closable\\r\\n        onClose={() => toggle('overlength')}\\r\\n        maskClosable\\r\\n      >\\r\\n        {Array.from(Array(100).fill(0)).map((_, index) => (\\r\\n          <div key={index}>\\r\\n            模态框内容\\r\\n            <br />\\r\\n          </div>\\r\\n        ))}\\r\\n      </Modal>\\r\\n    </>\\r\\n  );\\r\\n};\\r\\n\\r\\nReactDOM.render(<Demo />, mountNode);\\r\\n```\\r\\n\\r\\n## 带操作按钮\\r\\n\\r\\n```jsx\\r\\nimport { useState } from 'react';\\r\\nimport { Modal, List, Button } from 'zarm';\\r\\n\\r\\nconst Demo = () => {\\r\\n  const [visible, setVisible] = useState(false);\\r\\n  const toggle = () => setVisible(!visible);\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <List>\\r\\n        <List.Item\\r\\n          title=\\\"自定义操作按钮\\\"\\r\\n          suffix={\\r\\n            <Button size=\\\"xs\\\" onClick={toggle}>\\r\\n              开启\\r\\n            </Button>\\r\\n          }\\r\\n        />\\r\\n      </List>\\r\\n\\r\\n      <Modal\\r\\n        visible={visible}\\r\\n        title=\\\"标题\\\"\\r\\n        actions={[\\r\\n          {\\r\\n            key: 'online',\\r\\n            text: '在线阅读',\\r\\n            theme: 'default',\\r\\n          },\\r\\n          {\\r\\n            key: 'download',\\r\\n            text: '下载文件',\\r\\n            theme: 'default',\\r\\n            disabled: true,\\r\\n          },\\r\\n          [\\r\\n            {\\r\\n              key: 'cancel',\\r\\n              text: '取消',\\r\\n            },\\r\\n            {\\r\\n              key: 'delete',\\r\\n              text: '删除',\\r\\n              bold: true,\\r\\n              theme: 'danger',\\r\\n            },\\r\\n          ],\\r\\n        ]}\\r\\n        onAction={async (action) => {\\r\\n          switch (action.key) {\\r\\n            case 'cancel':\\r\\n              toggle();\\r\\n              break;\\r\\n            default:\\r\\n              // 模拟异步操作\\r\\n              await new Promise((resolve) => setTimeout(resolve, 3000));\\r\\n              toggle();\\r\\n          }\\r\\n          console.log(action);\\r\\n        }}\\r\\n      >\\r\\n        模态框内容\\r\\n      </Modal>\\r\\n    </>\\r\\n  );\\r\\n};\\r\\n\\r\\nReactDOM.render(<Demo />, mountNode);\\r\\n```\\r\\n\\r\\n## 警告框 Alert\\r\\n\\r\\n```jsx\\r\\nimport { List, Button, Modal, Toast } from 'zarm';\\r\\n\\r\\nconst Demo = () => {\\r\\n  return (\\r\\n    <List>\\r\\n      <List.Item\\r\\n        title=\\\"静态方法关闭\\\"\\r\\n        suffix={\\r\\n          <Button\\r\\n            size=\\\"xs\\\"\\r\\n            onClick={() => {\\r\\n              Modal.alert({\\r\\n                className: 'test',\\r\\n                title: '警告框标题',\\r\\n                content: '这里是警告框的内容部分',\\r\\n                onConfirm: () => {\\r\\n                  console.log('点击确认');\\r\\n                },\\r\\n              });\\r\\n            }}\\r\\n          >\\r\\n            开启\\r\\n          </Button>\\r\\n        }\\r\\n      />\\r\\n      <List.Item\\r\\n        title=\\\"使用 Promise 关闭\\\"\\r\\n        suffix={\\r\\n          <Button\\r\\n            size=\\\"xs\\\"\\r\\n            onClick={() => {\\r\\n              Modal.alert({\\r\\n                title: '警告框标题',\\r\\n                content: '这里是警告框的内容部分，点击关闭按钮，将触发 Promise 关闭警告框',\\r\\n                onConfirm: async () => {\\r\\n                  await new Promise((resolve) => setTimeout(resolve, 3000));\\r\\n                  Toast.show({ content: '提交成功' });\\r\\n                },\\r\\n              });\\r\\n            }}\\r\\n          >\\r\\n            开启\\r\\n          </Button>\\r\\n        }\\r\\n      />\\r\\n    </List>\\r\\n  );\\r\\n};\\r\\n\\r\\nReactDOM.render(<Demo />, mountNode);\\r\\n```\\r\\n\\r\\n## 确认框 Confirm\\r\\n\\r\\n```jsx\\r\\nimport { List, Button, Modal, Toast } from 'zarm';\\r\\n\\r\\nconst Demo = () => {\\r\\n  return (\\r\\n    <List>\\r\\n      <List.Item\\r\\n        title=\\\"静态方法关闭\\\"\\r\\n        suffix={\\r\\n          <Button\\r\\n            size=\\\"xs\\\"\\r\\n            onClick={() => {\\r\\n              Modal.confirm({\\r\\n                title: '确认信息',\\r\\n                content: '这里是确认框的内容部分',\\r\\n                onCancel: () => {\\r\\n                  console.log('点击cancel');\\r\\n                },\\r\\n                onConfirm: () => {\\r\\n                  console.log('点击ok');\\r\\n                },\\r\\n              });\\r\\n            }}\\r\\n          >\\r\\n            开启\\r\\n          </Button>\\r\\n        }\\r\\n      />\\r\\n      <List.Item\\r\\n        title=\\\"使用 Promise 关闭\\\"\\r\\n        suffix={\\r\\n          <Button\\r\\n            size=\\\"xs\\\"\\r\\n            onClick={() => {\\r\\n              Modal.confirm({\\r\\n                title: '确定要删除吗？',\\r\\n                content: '这里是确认框的内容部分，点击确定按钮，将触发 Promise 关闭确认框',\\r\\n                onConfirm: async () => {\\r\\n                  await new Promise((resolve) => setTimeout(resolve, 3000));\\r\\n                  Toast.show({ content: '提交成功' });\\r\\n                },\\r\\n              });\\r\\n            }}\\r\\n          >\\r\\n            开启\\r\\n          </Button>\\r\\n        }\\r\\n      />\\r\\n    </List>\\r\\n  );\\r\\n};\\r\\n\\r\\nReactDOM.render(<Demo />, mountNode);\\r\\n```\\r\\n\\r\\n## API\\r\\n\\r\\n| 属性              | 类型                                                                 | 默认值              | 说明                                                                                                                                                              |\\r\\n| :---------------- | :------------------------------------------------------------------- | :------------------ | :---------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\r\\n| shape             | string                                                               | 'radius'            | 形状，可选值 `rect`、`radius`                                                                                                                                     |\\r\\n| visible           | boolean                                                              | false               | 是否显示                                                                                                                                                          |\\r\\n| animationType     | string                                                               | 'fade'              | 动画效果，可选值 `fade`, `door`, `flip`, `rotate`, `zoom`,`move-up`, `move-down`, `move-left`, `move-right`,`slide-up`, `slide-down`, `slide-left`, `slide-right` |\\r\\n| animationDuration | number                                                               | 200                 | 动画执行时间（单位：毫秒）                                                                                                                                        |\\r\\n| width             | string &#124; number                                                 | '70%'               | 宽度                                                                                                                                                              |\\r\\n| mask              | boolean                                                              | true                | 是否展示遮罩层                                                                                                                                                    |\\r\\n| maskType          | string                                                               | 'normal'            | 遮罩层的类型，可选值 `transparent`, `normal`                                                                                                                      |\\r\\n| maskClosable      | boolean                                                              | false               | 是否点击遮罩层时关闭，需要和 onCancel 一起使用                                                                                                                    |\\r\\n| closable          | boolean                                                              | false               | 右上角是否显示关闭按钮，需要和 onCancel 一起使用                                                                                                                  |\\r\\n| onClose           | () => void                                                           | -                   | maskClosable 或 closable 为 true 时，点击遮罩或者右上角关闭按钮触发的函数                                                                                         |\\r\\n| title             | ReactNode                                                            | -                   | 标题                                                                                                                                                              |\\r\\n| footer            | ReactNode                                                            | -                   | 弹窗底部内容                                                                                                                                                      |\\r\\n| actions           | (ModalActionProps \\\\| ModalActionProps[])[]                           | []                  | 操作按钮配置                                                                                                                                                      |\\r\\n| onAction          | (action: ModalActionProps, index: number) => void \\\\| Promise\\\\<void\\\\> | -                   | 点击操作按钮后触发的函数                                                                                                                                          |\\r\\n| destroy           | boolean                                                              | true                | 弹层关闭后是否移除节点                                                                                                                                            |\\r\\n| afterOpen         | () => void                                                           | -                   | 模态框打开后的回调                                                                                                                                                |\\r\\n| afterClose        | () => void                                                           | -                   | 模态框关闭后的回调                                                                                                                                                |\\r\\n| mountContainer    | MountContainer                                                       | () => document.body | 指定 Modal 挂载的 HTML 节点                                                                                                                                       |\\r\\n\\r\\n### ModalActionProps 操作按钮属性\\r\\n\\r\\n| 属性     | 类型       | 默认值    | 说明                                            |\\r\\n| :------- | :--------- | :-------- | :---------------------------------------------- |\\r\\n| text     | ReactNode  | -         | 按钮文字                                        |\\r\\n| theme    | string     | 'primary' | 按钮主题，可选值 `default`、`primary`、`danger` |\\r\\n| disabled | boolean    | false     | 按钮是否禁用                                    |\\r\\n| bold     | boolean    | false     | 是否加粗                                        |\\r\\n| onClick  | () => void | -         | 按钮点击后触发的回调函数                        |\\r\\n\\r\\n## 指令式 API\\r\\n\\r\\n```tsx\\r\\n// 显示警告框，点击“确定”按钮执行 onConfirm 方法，如需做更多操作，参考下方 Confirm 的例子\\r\\nconst alert = Modal.alert({\\r\\n  title: '警告框标题',\\r\\n  content: '这里是警告框的内容部分',\\r\\n});\\r\\n\\r\\n// 显示确认框，若关闭时需要 Promise，onConfirm、onCancel 均支持 Promise\\r\\nconst confirm = Modal.confirm({\\r\\n  title: '确认框标题',\\r\\n  content: '这里是确认框的内容部分，点击确定按钮，将触发 Promise 关闭确认框',\\r\\n  onConfirm: () => {\\r\\n    return fetch.get('xxx.api').then((res) => {\\r\\n      if(res.code === 0) {\\r\\n        return true; // 关闭弹窗\\r\\n      } else {\\r\\n        return false; // 阻止弹窗关闭\\r\\n      }\\r\\n    }).catch(...);\\r\\n  }\\r\\n});\\r\\n\\r\\n```\\r\\n\\r\\n| 属性        | 类型       | 默认值                        | 说明                                        |\\r\\n| :---------- | :--------- | :---------------------------- | :------------------------------------------ |\\r\\n| title       | ReactNode  | -                             | 弹出框的标题                                |\\r\\n| content     | ReactNode  | -                             | 弹出框的内容                                |\\r\\n| cancelText  | ReactNode  | '取消'                        | 取消按钮的内容                              |\\r\\n| confirmText | ReactNode  | '确定'                        | 确定按钮的内容                              |\\r\\n| onConfirm   | () => void | -                             | 点击“确定”后的回调函数 |\\r\\n| onCancel    | () => void | -                             | 点击“取消”后的回调函数                 |\\r\\n\\r\\n## CSS 变量\\r\\n\\r\\n| 属性                       | 默认值                              | 说明                       |\\r\\n| :------------------------- | :---------------------------------- | :------------------------- |\\r\\n| --background               | 'rgb(242, 242, 242)'                | 背景色                     |\\r\\n| --border-radius            | '14px'                              | 圆角大小                   |\\r\\n| --shadow                   | '0 7px 21px var(--za-color-shadow)' | 阴影样式                   |\\r\\n| --title-font-size          | '17px'                              | 标题字体大小               |\\r\\n| --title-font-weight        | 500                                 | 标题字体粗细               |\\r\\n| --title-text-color         | 'var(--za-color-text)'              | 标题字体颜色               |\\r\\n| --close-size               | '20px'                              | 关闭图标字体大小           |\\r\\n| --close-color              | '#ccc'                              | 关闭图标颜色               |\\r\\n| --close-active-color       | '#999'                              | 关闭图标激活状态颜色       |\\r\\n| --body-font-size           | '13px'                              | 内容字体大小               |\\r\\n| --body-text-color          | 'var(--za-color-text)'              | 内容字体颜色               |\\r\\n| --body-padding             | '16px'                              | 内容内边距                 |\\r\\n| --button-background        | 'transparent'                       | 操作按钮背景               |\\r\\n| --button-height            | '44px'                              | 操作按钮高度               |\\r\\n| --button-font-size         | '17px'                              | 操作按钮字体大小           |\\r\\n| --button-font-weight       | 500                                 | 操作按钮字体粗细           |\\r\\n| --button-text-color        | 'var(--za-theme-primary)'           | 操作按钮字体颜色           |\\r\\n| --button-active-background | 'var(--za-background-active)'       | 操作按钮选中背景           |\\r\\n| --button-disabled-opacity  | 'var(--za-opacity-disabled)'        | 操作按钮禁用状态时的透明度 |\\r\\n\";"],"names":[],"sourceRoot":""}